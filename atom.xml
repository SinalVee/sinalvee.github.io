<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SinalVee Blog</title>
  
  <subtitle>SinalVee</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sinalvee.io/"/>
  <updated>2016-07-18T02:51:31.000Z</updated>
  <id>https://blog.sinalvee.io/</id>
  
  <author>
    <name>SinalVee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Nexmo发送中文短信</title>
    <link href="https://blog.sinalvee.io/2016/07/18/send-chinese-sms-using-nexmo/"/>
    <id>https://blog.sinalvee.io/2016/07/18/send-chinese-sms-using-nexmo/</id>
    <published>2016-07-18T02:51:31.000Z</published>
    <updated>2016-07-18T02:51:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的项目要发送短信通知，因为用户都是国际用户，因此国际短信是必不可少的，一开始打算选择国内的【云片】平台，但是签名不能是全英文有些尴尬，最终选择了【Nexmo】。</p><p>Nexmo发送短信的<a href="https://docs.nexmo.com/messaging/sms-api" target="_blank" rel="noopener">API</a>还是非常简单的，一些语言也给出了详细的使用例子。这里copy一下nodejs的例子。</p><p>需要注意的是，如果发送的内容带有中文等字符，需要将<code>type</code>设置为<code>unicode</code>，不然的话收到的短信中这些字符会全部为问号。</p><a id="more"></a> <pre><code class="js"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);<span class="keyword">var</span> data = <span class="built_in">JSON</span>.stringify({  api_key: <span class="string">'API_KEY'</span>,  api_secret: <span class="string">'API_SECRET'</span>,  to: <span class="string">'441632960960'</span>,  <span class="keyword">from</span>: <span class="string">'441632960961'</span>,  text: <span class="string">'你好'</span>,  type: <span class="string">'unicode'</span>});<span class="keyword">var</span> options = {  host: <span class="string">'rest.nexmo.com'</span>,  path: <span class="string">'/sms/json'</span>,  port: <span class="number">443</span>,  method: <span class="string">'POST'</span>,  headers: {    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,    <span class="string">'Content-Length'</span>: Buffer.byteLength(data)  }};<span class="keyword">var</span> req = https.request(options);req.write(data);req.end();<span class="keyword">var</span> responseData = <span class="string">''</span>;req.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>{  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>{    responseData += chunk;  });  res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(responseData));  });});</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司的项目要发送短信通知，因为用户都是国际用户，因此国际短信是必不可少的，一开始打算选择国内的【云片】平台，但是签名不能是全英文有些尴尬，最终选择了【Nexmo】。&lt;/p&gt;
&lt;p&gt;Nexmo发送短信的&lt;a href=&quot;https://docs.nexmo.com/messaging/sms-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;API&lt;/a&gt;还是非常简单的，一些语言也给出了详细的使用例子。这里copy一下nodejs的例子。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果发送的内容带有中文等字符，需要将&lt;code&gt;type&lt;/code&gt;设置为&lt;code&gt;unicode&lt;/code&gt;，不然的话收到的短信中这些字符会全部为问号。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Nodejs - Breaking changes between v5 and v6</title>
    <link href="https://blog.sinalvee.io/2016/05/18/nodejs-breaking-changes-between-v5-and-v6/"/>
    <id>https://blog.sinalvee.io/2016/05/18/nodejs-breaking-changes-between-v5-and-v6/</id>
    <published>2016-05-18T09:10:27.000Z</published>
    <updated>2016-05-18T09:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>英语水平比较渣，如果有翻译不对的地方请指出，谢谢。<br>原文地址：<a href="https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v5-and-v6.md" target="_blank" rel="noopener">Nodejs - Breaking changes between v5 and v6</a></p><hr><p>查看之前的改动日志，请查看<a href="https://github.com/nodejs/node/wiki/Breaking-changes-between-v4-and-v5" target="_blank" rel="noopener">v4 to v5</a>页面。</p><p>89个提交被标记为<code>semver-major</code>。</p><a id="more"></a> <p><strong>注意</strong>：<code>#</code> 与 <code>.prototype.</code> 同意，表示该类的实例的属性是可用的。<br>例如：<code>Object#toString()</code> 等同于 <code>Object.prototype.toString()</code>。</p><h2 id="By-Subsystem"><a href="#By-Subsystem" class="headerlink" title="By Subsystem"></a>By Subsystem</h2><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>弃用<code>new Buffer()</code>并由一些列新增的<a href="https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe" target="_blank" rel="noopener">Buffer API: <code>Buffer.from()</code>，<code>Buffer.alloc()</code>，<code>Buffer.allocUnsafe()</code></a>替代。<ul><li>Refs： <a href="https://github.com/nodejs/node/commit/85ab4a5f12" target="_blank" rel="noopener"><code>85ab4a5f12</code></a>，<a href="https://github.com/nodejs/node/pull/4682" target="_blank" rel="noopener">#4682</a></li></ul></li><li>移除之前弃用的<code>Buffer#write(string, encoding, offset, length)</code><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_write_string_offset_length_encoding" target="_blank" rel="noopener"><code>Buffer#write()</code></a>保留其他调用方式，如<code>Buffer#write(string[, encoding])</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/2c55cc2d2c" target="_blank" rel="noopener"><code>2c55cc2d2c</code></a>,  <a href="https://github.com/nodejs/node/pull/5048" target="_blank" rel="noopener">#5048</a></li></ul></li><li>移除之前弃用的<code>Buffer#{get|set}</code>方法。<ul><li><code>Buffer#get(index)</code>由<code>buffer[index]</code>替代。</li><li><code>Buffer#set(index, value)</code>由<code>buffer[index] = value</code>替代。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/101bca988c" target="_blank" rel="noopener"><code>101bca988c</code></a>, <a href="https://github.com/nodejs/node/pull/4594" target="_blank" rel="noopener">#4594</a></li></ul></li><li><code>new Buffer(length, encoding)</code>现在会抛出异常。<ul><li>如果传入的<code>length</code>参数是数字的话没有什么影响（译者注：个人认为这里应该是传入参数是string类型没有影响，推荐详细阅读PR），这个改动用来指出一种潜在的安全问题。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/3b27dd5ce1" target="_blank" rel="noopener"><code>3b27dd5ce1</code></a>, <a href="https://github.com/nodejs/node/pull/4514" target="_blank" rel="noopener">#4514</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_class_slowbuffer" target="_blank" rel="noopener"><code>SlowBuffer</code></a>由<code>Buffer.allocUnsafeSlow()</code>替代并在文档中给出弃用警告。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/3fe204c700" target="_blank" rel="noopener"><code>3fe204c700</code></a>, <a href="https://github.com/nodejs/node/commit/627524973a" target="_blank" rel="noopener"><code>627524973a</code></a>, <a href="https://github.com/nodejs/node/pull/5833" target="_blank" rel="noopener">#5833</a></li></ul></li></ul><h3 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/cluster.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>弃用<code>Worker#suicide</code>属性并由语义更清晰的<a href="https://nodejs.org/dist/latest-v6.x/docs/api/cluster.html#cluster_worker_exitedafterdisconnect" target="_blank" rel="noopener"><code>Worker#exitedAfterDisconnect</code></a>替代。<ul><li>功能保持不变。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/4f619bde4c" target="_blank" rel="noopener"><code>4f619bde4c</code></a>, <a href="https://github.com/nodejs/node/pull/3743" target="_blank" rel="noopener">#3743</a></li></ul></li><li>cluster的<a href="https://nodejs.org/dist/latest-v6.x/docs/api/cluster.html#cluster_event_message_1" target="_blank" rel="noopener"><code>&#39;message&#39;</code></a>事件的回调函数现在有三个参数，第一个参数为<code>worker</code>。<ul><li>之前的回调函数的参数为<code>(message, handle)</code>，现在是<code>(worker, message, handle)</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/66f4586dd0" target="_blank" rel="noopener"><code>66f4586dd0</code></a>, <a href="https://github.com/nodejs/node/pull/5361" target="_blank" rel="noopener">#5361</a></li></ul></li></ul><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/console.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/console.html#console_console_timeend_label" target="_blank" rel="noopener"><code>Console#timeEnd(label)</code></a>现在将在完成后清除label。<ul><li>之前会将label遗留在<code>_times</code>中.</li><li>Refs: <a href="https://github.com/nodejs/node/commit/a5cce79ec3" target="_blank" rel="noopener"><code>a5cce79ec3</code></a>, <a href="https://github.com/nodejs/node/pull/3562" target="_blank" rel="noopener">#3562</a></li></ul></li><li>如果label不存在，<code>Console#timeEnd(label)</code>现在只会发出警告。<ul><li>之前会抛出错误。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/1c84579031" target="_blank" rel="noopener"><code>1c84579031</code></a>, <a href="https://github.com/nodejs/node/pull/5901" target="_blank" rel="noopener">#5901</a></li></ul></li></ul><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/crypto.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>改进C++代码中的错误信息的格式。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/41feaa89e0" target="_blank" rel="noopener"><code>41feaa89e0</code></a>, <a href="https://github.com/nodejs/node/pull/3100" target="_blank" rel="noopener">#3100</a>, <a href="https://github.com/nodejs/node/commit/1d9451bb5a" target="_blank" rel="noopener"><code>1d9451bb5a</code></a>, <a href="https://github.com/nodejs/node/pull/6042" target="_blank" rel="noopener">#6042</a></li></ul></li><li>如果node构建时没有crypto支持，<code>require(&#39;crypto&#39;)</code>会抛出异常。<ul><li><code>require(&#39;tls&#39;)</code>和<code>require(&#39;https&#39;)</code>同上。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/f429fe1b88" target="_blank" rel="noopener"><code>f429fe1b88</code></a>, <a href="https://github.com/nodejs/node/pull/5611" target="_blank" rel="noopener">#5611</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/crypto.html#crypto_class_certificate" target="_blank" rel="noopener"><code>crypto.Certificate</code></a>不再有<code>_handle</code> 属性。<ul><li>之前需要<code>_handle</code>属性的类方法现在直接调用c++ binding。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/a37401e061" target="_blank" rel="noopener"><code>a37401e061</code></a>, <a href="https://github.com/nodejs/node/pull/5382" target="_blank" rel="noopener">#5382</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback" target="_blank" rel="noopener"><code>crypto.pbkdf2()</code></a>的<code>digest</code>参数现在是必传的。<ul><li>目前不使用digest参数会打印弃用的警告。</li></ul></li><li>crypto所有方法的默认编码为<code>utf8</code>。<ul><li>之前默认的编码是<code>binary</code> (<code>latin1</code>的nodejs版)。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/b010c87164" target="_blank" rel="noopener"><code>b010c87164</code></a>, <a href="https://github.com/nodejs/node/pull/5522" target="_blank" rel="noopener">#5522</a></li></ul></li><li>默认关闭FIPS兼容模式即使node是在FIPS规则下构建。<ul><li>注意：正常发布的node不是在启用FIPS情况下构建的。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/7c48cb5601" target="_blank" rel="noopener"><code>7c48cb5601</code></a>, <a href="https://github.com/nodejs/node/pull/5181" target="_blank" rel="noopener">#5181</a></li></ul></li></ul><h3 id="dgram"><a href="#dgram" class="headerlink" title="dgram"></a>dgram</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/dgram.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>如果执行<a href="https://nodejs.org/dist/latest-v6.x/docs/api/dgram.html#dgram_socket_send_msg_offset_length_port_address_callback" target="_blank" rel="noopener"><code>Socket#send()</code></a>没有发生错误，回调函数的<code>error</code>参数现在为<code>null</code>，而不是<code>0</code>.<ul><li>在io.js 1.0.0中<a href="https://github.com/nodejs/node/commit/c9fd9e2162" target="_blank" rel="noopener"><code>c9fd9e2</code></a>之前就是这样的。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/4bc1cccb22" target="_blank" rel="noopener"><code>4bc1cccb22</code></a>, <a href="https://github.com/nodejs/node/pull/5929" target="_blank" rel="noopener">#5929</a></li></ul></li></ul><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/dns.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_resolve_hostname_rrtype_callback" target="_blank" rel="noopener"><code>dns.resolve()</code></a>现在支持解析纯DNS PTR记录。<ul><li>之前，调用<code>dns.resolve(hostname, &#39;PTR&#39;, cb)</code>会调用<code>dns.reverse()</code>，之后不再这样。</li><li>现在hostname必须传入反转的 <em>IN-ADDR</em> 域。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/dbdbdd4998" target="_blank" rel="noopener"><code>dbdbdd4998</code></a>, <a href="https://github.com/nodejs/node/pull/4921" target="_blank" rel="noopener">#4921</a></li></ul></li></ul><p>Before:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dns.resolve(<span class="string">'8.8.4.4'</span>, <span class="string">'PTR'</span>, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// result =&gt; ['google-public-dns-b.google.com']</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>After:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dns.resolve(<span class="string">'4.4.8.8-in-addr.arpa'</span>, <span class="string">'PTR'</span>, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// result =&gt; ['google-public-dns-b.google.com']</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// one could also simply do</span></span><br><span class="line">dns.reverse(<span class="string">'8.8.4.4'</span>, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// result =&gt; ['google-public-dns-b.google.com']</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_lookupservice_address_port_callback" target="_blank" rel="noopener"><code>dns.lookupService()</code></a>现在将port参数强制转换为数字。<ul><li>之前，如果<code>port</code>不是数字会抛出<code>TypeError</code>。</li><li>现在，如果port不在 0-65535 范围内的话会抛出<code>TypeError</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/f3be421c1c" target="_blank" rel="noopener"><code>f3be421c1c</code></a>, <a href="https://github.com/nodejs/node/pull/4883" target="_blank" rel="noopener">#4883</a></li></ul></li></ul><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/domain.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>如果没有domain <code>error</code>事件处理程序，domains不再将上下文指派给其他错误处理程序。<ul><li>之前只有在domain的<code>error</code>事件被处理的情况下才这样处理。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/90204cc468" target="_blank" rel="noopener"><code>90204cc468</code></a>, <a href="https://github.com/nodejs/node/pull/4659" target="_blank" rel="noopener">#4659</a></li></ul></li></ul><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/events.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>内部事件处理程序的存储对象<code>EventEmitter#_events</code>现在继承自<code>Object.create(null)</code>而不是<code>Object.prototype</code>。<ul><li>这样避免了使用原本保留的属性名时的问题，例如：<code>__proto__</code>。</li><li>这也意味着，模块有意添加在<code>Object.prototype</code>上的所有属性在<code>_events</code>中都不可用。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/e38bade828" target="_blank" rel="noopener"><code>e38bade828</code></a>, <a href="https://github.com/nodejs/node/pull/6092" target="_blank" rel="noopener">#6092</a></li></ul></li></ul><h3 id="freelist"><a href="#freelist" class="headerlink" title="freelist"></a>freelist</h3><ul><li>移除弃用的<code>freelist</code>模块。<ul><li>这个模块主要用于内部使用，我们没有维护它的打算。</li><li>如有需要使用他人的模块会更合适。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/b70dc67828" target="_blank" rel="noopener"><code>b70dc67828</code></a>, <a href="https://github.com/nodejs/node/pull/3738" target="_blank" rel="noopener">#3738</a></li></ul></li></ul><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_readdir_path_options_callback" target="_blank" rel="noopener"><code>fs.readdir{Sync}()</code></a>现在默认返回utf8编码的文件名。<ul><li>文件名的编码现在通过一个选项来配置。</li><li>Example: <code>fs.readdir(path, { encoding: &#39;hex&#39; }, callback)</code></li><li>Refs: <a href="https://github.com/nodejs/node/commit/060e5f0c00" target="_blank" rel="noopener"><code>060e5f0c00</code></a>, <a href="https://github.com/nodejs/node/pull/5616" target="_blank" rel="noopener">#5616</a></li></ul></li><li>弃用重新评估用户代码中的<code>fs</code>源码。（译者注：这句不知道怎么翻译才好。原文：Deprecated re-evaluating the fs source code from user code.）<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/1d79787e2e" target="_blank" rel="noopener"><code>1d79787e2e</code></a>, <a href="https://github.com/nodejs/node/pull/5102" target="_blank" rel="noopener">#5102</a></li></ul></li><li>弃用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback" target="_blank" rel="noopener"><code>fs.read()</code></a>遗留的<code>(fd, length, position, encoding, callback)</code>调用方式。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/1124de2d76" target="_blank" rel="noopener"><code>1124de2d76</code></a>, <a href="https://github.com/nodejs/node/pull/4525" target="_blank" rel="noopener">#4525</a></li></ul></li><li><code>fs.read()</code>读长为0时不再抛出异常。（译者注：接收数据的buffer长度为0。）<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/2b15e68bbe" target="_blank" rel="noopener"><code>2b15e68bbe</code></a>, <a href="https://github.com/nodejs/node/pull/4518" target="_blank" rel="noopener">#4518</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_link_srcpath_dstpath_callback" target="_blank" rel="noopener"><code>fs.link{Sync}()</code></a>现在按照正确的顺序检查调用参数。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/8b97249893" target="_blank" rel="noopener"><code>8b97249893</code></a>, <a href="https://github.com/nodejs/node/pull/3917" target="_blank" rel="noopener">#3917</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_realpath_path_options_callback" target="_blank" rel="noopener"><code>fs.realpath{Sync}()</code></a>现在内部使用<code>uv_fs_realpath()</code>而不是JavaScript实现.<ul><li><code>cache</code>参数不再接受对象作为缓存，并且被<code>options</code>参数替代。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/b488b19eaf" target="_blank" rel="noopener"><code>b488b19eaf</code></a>, <a href="https://github.com/nodejs/node/pull/3594" target="_blank" rel="noopener">#3594</a></li></ul></li></ul><h3 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/globals.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>弃用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/globals.html#globals_global" target="_blank" rel="noopener"><code>global</code></a>的别名<code>root</code>和<code>GLOBAL</code>。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/4e46931406" target="_blank" rel="noopener"><code>4e46931406</code></a>, <a href="https://github.com/nodejs/node/pull/1838" target="_blank" rel="noopener">#1838</a></li></ul></li></ul><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/modules.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>现在在相对查找时优先查找当前目录。<ul><li>之前如果<code>node_module</code>目录存在会优先查找<code>node_module</code>目录。</li><li>例如，之前如果<code>node_modules/example</code>存在，<code>require(&#39;./example&#39;)</code>会优先加载<code>node_modules/example</code>而不是<code>./example.js</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/d38503ab01" target="_blank" rel="noopener"><code>d38503ab01</code></a>, <a href="https://github.com/nodejs/node/pull/5689" target="_blank" rel="noopener">#5689</a></li></ul></li><li>现在使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/globals.html#globals_require" target="_blank" rel="noopener"><code>require()</code></a>时符号链接会被保留。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/de1dc0ae2e" target="_blank" rel="noopener"><code>de1dc0ae2e</code></a>, <a href="https://github.com/nodejs/node/pull/5950" target="_blank" rel="noopener">#5950</a>.</li></ul></li><li><code>require()</code>的文件中的语法错误现在会打印更多信息。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/18490d3d5a" target="_blank" rel="noopener"><code>18490d3d5a</code></a>, <a href="https://github.com/nodejs/node/pull/4287" target="_blank" rel="noopener">#4287</a></li></ul></li></ul><h3 id="net"><a href="#net" class="headerlink" title="net"></a>net</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/net.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>现在检查端口有效时更严谨。<ul><li>现在保证像<code>true</code>和<code>[1]</code>等值不被视为有效的端口。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/d0edabecbf" target="_blank" rel="noopener"><code>d0edabecbf</code></a>, <a href="https://github.com/nodejs/node/pull/5733" target="_blank" rel="noopener">#5733</a>, <a href="https://github.com/nodejs/node/commit/02ac302b6d" target="_blank" rel="noopener"><code>02ac302b6d</code></a>, <a href="https://github.com/nodejs/node/pull/5732" target="_blank" rel="noopener">#5732</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/net.html#net_net_createserver_options_connectionlistener" target="_blank" rel="noopener"><code>net.createServer()</code></a>现在当提供的<code>options</code>参数不是对象时会抛出异常。<ul><li>仍然可以只提供一个connectionListener回调函数。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/a78b3344f8" target="_blank" rel="noopener"><code>a78b3344f8</code></a>, <a href="https://github.com/nodejs/node/pull/2904" target="_blank" rel="noopener">#2904</a></li></ul></li><li><code>V4MAPPED</code> DNS hint不再默认设置，但<code>ADDRCONFIG</code>仍然会默认设置。<ul><li>如果你的平台需要设置hints，可以使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/net.html#net_socket_connect_options_connectlistener" target="_blank" rel="noopener"><code>Socket#connect()</code></a>中新的选项<code>hints</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/b85a50b6da" target="_blank" rel="noopener"><code>b85a50b6da</code></a>, <a href="https://github.com/nodejs/node/pull/6021" target="_blank" rel="noopener">#6021</a></li></ul></li></ul><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/path.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>如果提供的输入不是string类型的话，所有path模块的方法都会抛出异常。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/08085c49b6" target="_blank" rel="noopener"><code>08085c49b6</code></a>, <a href="https://github.com/nodejs/node/pull/5348" target="_blank" rel="noopener">#5348</a></li></ul></li><li>现在<a href="https://nodejs.org/dist/latest-v6.x/docs/api/path.html#path_path_format_pathobject" target="_blank" rel="noopener"><code>path.format()</code></a>在不同平台更一致且更实用。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/d1000b4137" target="_blank" rel="noopener"><code>d1000b4137</code></a>, <a href="https://github.com/nodejs/node/pull/2408" target="_blank" rel="noopener">#2408</a></li></ul></li></ul><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/process.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>现在使用<code>process.EventEmitter</code>会打印弃用警告。<ul><li>该方法已经在源码中弃用很长时间。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/25751bedfe" target="_blank" rel="noopener"><code>25751bedfe</code></a>, <a href="https://github.com/nodejs/node/pull/5049" target="_blank" rel="noopener">#5049</a></li></ul></li><li>所有之前打印的node警告行为更加一致，现在只通过默认的处理程序发出process <a href="https://nodejs.org/dist/latest-v6.x/docs/api/process.html#process_event_warning" target="_blank" rel="noopener"><code>&#39;warning&#39;</code></a>事件。<ul><li>包括弃用警告，现在被归类为<code>DeprecationWarning</code>.</li><li>Refs: <a href="https://github.com/nodejs/node/commit/c6656db352" target="_blank" rel="noopener"><code>c6656db352</code></a>, <a href="https://github.com/nodejs/node/pull/4782" target="_blank" rel="noopener">#4782</a></li></ul></li><li>现在如果<a href="https://nodejs.org/dist/latest-v6.x/docs/api/process.html#process_process_nexttick_callback_arg" target="_blank" rel="noopener"><code>process.nextTick()</code></a>的参数不是function的话会抛出异常。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/72e3dd9f43" target="_blank" rel="noopener"><code>72e3dd9f43</code></a>, <a href="https://github.com/nodejs/node/pull/3860" target="_blank" rel="noopener">#3860</a></li></ul></li></ul><h3 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/querystring.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/querystring.html#querystring_querystring_parse_str_sep_eq_options" target="_blank" rel="noopener"><code>querystring.parse()</code></a>返回的解析后的对象现在继承自<code>Object.create(null)</code>而不是<code>Object.prototype</code>。<ul><li>这样避免了使用原本保留的属性名时的问题，例如：<code>__proto__</code>。</li><li>这也意味着，模块有意添加在<code>Object.prototype</code>上的所有属性在返回的对象中都不可用。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/dba245f796" target="_blank" rel="noopener"><code>dba245f796</code></a>, <a href="https://github.com/nodejs/node/pull/6055" target="_blank" rel="noopener">#6055</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/querystring.html#querystring_querystring_escape" target="_blank" rel="noopener"><code>querystring.escape()</code></a>现在对于对象使用<code>Object#toString()</code>而不是<code>Object#valueOf()</code>。<ul><li>这样使得它与<code>encodeURIComponent()</code>的功能更加一致。</li><li><a href="https://github.com/nodejs/node/commit/5dafb435d8" target="_blank" rel="noopener"><code>5dafb435d8</code></a>, <a href="https://github.com/nodejs/node/pull/5341" target="_blank" rel="noopener">#5341</a></li></ul></li></ul><h3 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/readline.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>Readline的历史现在可以通过设置<a href="https://nodejs.org/dist/latest-v6.x/docs/api/readline.html#readline_readline_createinterface_options" target="_blank" rel="noopener"><code>createInterface()</code></a>的选项<code>historySize</code>为<code>0</code>来禁用。<ul><li>之前将之设置为<code>0</code>会使用默认的<code>30</code>行。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/0303a2552e" target="_blank" rel="noopener"><code>0303a2552e</code></a>, <a href="https://github.com/nodejs/node/pull/6352" target="_blank" rel="noopener">#6352</a></li></ul></li><li>不建议使用下面这些不在文档中的readline函数，它们仅用于内部使用：<ul><li><code>isFullWidthCodePoint()</code>, <code>stripVTControlCharacters()</code>, <code>getStringWidth()</code>, <code>emitKeys()</code></li><li>Refs: <a href="https://github.com/nodejs/node/commit/ca2e8b292f" target="_blank" rel="noopener"><code>ca2e8b292f</code></a>, <a href="https://github.com/nodejs/node/pull/3862" target="_blank" rel="noopener">#3862</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/readline.html#readline_readline_emitkeypressevents_stream" target="_blank" rel="noopener"><code>Readline#emitKeypressEvents(stream)</code></a>现在总是向提供的stream的<code>&#39;keypress&#39;</code>事件传入按键信息。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/0a62f929da" target="_blank" rel="noopener"><code>0a62f929da</code></a>, <a href="https://github.com/nodejs/node/pull/6024" target="_blank" rel="noopener">#6024</a></li></ul></li></ul><h3 id="repl"><a href="#repl" class="headerlink" title="repl"></a>repl</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/repl.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>现在可以向<code>_</code>赋值，<code>_</code>通常保存REPL中最后一个表达式的结果。<ul><li>这样做将会打印一条警告并禁用保存最后一个表达式的结果。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/ad8257fa5b" target="_blank" rel="noopener"><code>ad8257fa5b</code></a>, <a href="https://github.com/nodejs/node/pull/5535" target="_blank" rel="noopener">5535</a></li></ul></li><li>做了一些改进减少当REPL执行失败时的错误数量。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/3ee68f794f" target="_blank" rel="noopener"><code>3ee68f794f</code></a>, <a href="https://github.com/nodejs/node/pull/6328" target="_blank" rel="noopener">6328</a></li></ul></li></ul><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/stream.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>在使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/stream.html#stream_object_mode" target="_blank" rel="noopener">object mode</a>时<a href="https://nodejs.org/dist/latest-v6.x/docs/api/stream.html#stream_writable_write_chunk_encoding_callback" target="_blank" rel="noopener">写入</a>一个<code>null</code>块现在是无效的，将会抛出<code>TypeError</code>。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/e7c077c610" target="_blank" rel="noopener"><code>e7c077c610</code></a>, <a href="https://github.com/nodejs/node/pull/6170" target="_blank" rel="noopener">#6170</a></li></ul></li></ul><h3 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/timers.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>如果没有向提供<code>set{</code><a href="https://nodejs.org/dist/latest-v6.x/docs/api/timers.html#timers_settimeout_callback_delay_arg" target="_blank" rel="noopener"><code>Timeout</code></a><code>|</code><a href="https://nodejs.org/dist/latest-v6.x/docs/api/timers.html#timers_setinterval_callback_delay_arg" target="_blank" rel="noopener"><code>Interval</code></a><code>|</code><a href="https://nodejs.org/dist/latest-v6.x/docs/api/timers.html#timers_setimmediate_callback_arg" target="_blank" rel="noopener"><code>Immediate</code></a><code>}()</code>函数将会立刻抛出异常。<ul><li>这些方法之前也会抛出异常，但是是在时间到时抛出。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/ac153bd2a6" target="_blank" rel="noopener"><code>ac153bd2a6</code></a>, <a href="https://github.com/nodejs/node/pull/4362" target="_blank" rel="noopener">#4362</a></li></ul></li></ul><h3 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html#tls_class_tls_server" target="_blank" rel="noopener"><code>tls.Server</code></a>的<code>&#39;clientError&#39;</code>修改为<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html#tls_event_tlsclienterror" target="_blank" rel="noopener"><code>&#39;tlsClientError&#39;</code></a>。<ul><li>因为T<code>http</code>现在有<a href="https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_event_clienterror" target="_blank" rel="noopener"><code>&#39;clientError&#39;</code></a>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/1ab6b21360" target="_blank" rel="noopener"><code>1ab6b21360</code></a>, <a href="https://github.com/nodejs/node/pull/4557" target="_blank" rel="noopener">#4557</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html#tls_tls_createserver_options_secureconnectionlistener" target="_blank" rel="noopener"><code>tls.createServer()</code></a>‘s <code>sessionIdContext</code>现在默认使用sha1代替md5进行hash.<ul><li>仅适用于<code>sessionIdContext</code>没有手动设置并且<code>requestCert</code>设置为<code>true</code>。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/df268f97bc" target="_blank" rel="noopener"><code>df268f97bc</code></a>, <a href="https://github.com/nodejs/node/pull/3866" target="_blank" rel="noopener">#3866</a></li></ul></li><li>在文档中弃用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options" target="_blank" rel="noopener"><code>tls.createSecurePair()</code></a>并使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tls.html#tls_class_tls_tlssocket" target="_blank" rel="noopener"><code>TLSSocket</code></a>替代。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/31de5cc436" target="_blank" rel="noopener"><code>31de5cc436</code></a>, <a href="https://github.com/nodejs/node/pull/6063" target="_blank" rel="noopener">#6063</a></li></ul></li></ul><h3 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tty.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>移除之前弃用的全局方法<code>tty.setRawMode()</code>。<ul><li>使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/tty.html#tty_rs_setrawmode_mode" target="_blank" rel="noopener">tty instance method</a>替代。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/a2c0aa84e0" target="_blank" rel="noopener"><code>a2c0aa84e0</code></a>, <a href="https://github.com/nodejs/node/pull/2528" target="_blank" rel="noopener">#2528</a></li></ul></li></ul><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/url.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>现在如果host改变，<a href="https://nodejs.org/dist/latest-v6.x/docs/api/url.html#url_url_resolve_from_to" target="_blank" rel="noopener"><code>url.resolve()</code></a>将清除认证信息。<ul><li>这是一种安全措施，以确保身份验证凭据不会泄露。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/eb4201f07a" target="_blank" rel="noopener"><code>eb4201f07a</code></a>, <a href="https://github.com/nodejs/node/pull/1480" target="_blank" rel="noopener">#1480</a></li></ul></li></ul><h3 id="util"><a href="#util" class="headerlink" title="util"></a>util</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/util.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>Error子类现在被格式化为<code>[MyError: message]</code>而不是<code>MyError {}</code>。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/e2f47f5698" target="_blank" rel="noopener"><code>e2f47f5698</code></a>, <a href="https://github.com/nodejs/node/pull/4582" target="_blank" rel="noopener">#4582</a></li></ul></li><li><code>Date</code>现在总是使用<code>Date#toISOString()</code>来格式化。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/93d6b5fb68" target="_blank" rel="noopener"><code>93d6b5fb68</code></a>, <a href="https://github.com/nodejs/node/pull/4318" target="_blank" rel="noopener">#4318</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/util.html#util_util_inspect_object_options" target="_blank" rel="noopener"><code>util.inspect()</code></a>现在使用c++ bindings检测。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/24012a879d" target="_blank" rel="noopener"><code>24012a879d</code></a>, <a href="https://github.com/nodejs/node/pull/4098" target="_blank" rel="noopener">#4098</a></li></ul></li><li>移除之前弃用的<code>util.pump()</code>，请使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/stream.html#stream_readable_pipe_destination_options" target="_blank" rel="noopener"><code>ReadableStream#pipe()</code></a>替代。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/007cfea308" target="_blank" rel="noopener"><code>007cfea308</code></a>, <a href="https://github.com/nodejs/node/pull/2531" target="_blank" rel="noopener">#2531</a></li></ul></li><li>移除之前弃用的<code>util.exec()</code>，请使用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="noopener"><code>child_process.exec()</code></a>替代。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/4cf19ad1bb" target="_blank" rel="noopener"><code>4cf19ad1bb</code></a>, <a href="https://github.com/nodejs/node/pull/2530" target="_blank" rel="noopener">#2530</a></li></ul></li><li>TypedArrays格式化现在与普通数组一样。<ul><li>同样适用于ArrayBuffer和DataView。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/34a35919e1" target="_blank" rel="noopener"><code>34a35919e1</code></a>, <a href="https://github.com/nodejs/node/pull/3793" target="_blank" rel="noopener">#3793</a></li></ul></li><li>弃用<a href="https://nodejs.org/dist/latest-v6.x/docs/api/util.html#util_util_extend_obj" target="_blank" rel="noopener"><code>util._extend()</code></a>并由<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign()</code></a>替代。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/d8290286b3" target="_blank" rel="noopener"><code>d8290286b3</code></a>, <a href="https://github.com/nodejs/node/pull/4903" target="_blank" rel="noopener">#4903</a></li></ul></li><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/util.html#util_util_log_string" target="_blank" rel="noopener"><code>util.log()</code></a>在文档中给出弃用警告。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/236b7e8dd1" target="_blank" rel="noopener"><code>236b7e8dd1</code></a>, <a href="https://github.com/nodejs/node/pull/6161" target="_blank" rel="noopener">#6161</a></li></ul></li></ul><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/vm.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/vm.html#vm_class_script" target="_blank" rel="noopener"><code>vm.Script</code></a>的<code>displayErrors</code>选项现在错误堆栈附加导致错误的代码行。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/57003520f8" target="_blank" rel="noopener"><code>57003520f8</code></a>, <a href="https://github.com/nodejs/node/pull/4874" target="_blank" rel="noopener">#4874</a></li></ul></li></ul><h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><p>[<a href="https://nodejs.org/dist/latest-v6.x/docs/api/zlib.html" target="_blank" rel="noopener">Docs</a>]</p><ul><li>zlib实例的<code>close</code>事件不再在同步调用中发出。<ul><li>只会影响所有的<code>*Sync()</code>方法。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/8b43d3f52d" target="_blank" rel="noopener"><code>8b43d3f52d</code></a>, <a href="https://github.com/nodejs/node/pull/5707" target="_blank" rel="noopener">#5707</a></li></ul></li><li>Gzip流的尾随垃圾不再丢弃，现在会抛出错误。<ul><li>注意：空字节田中不受影响，因为诸多场合已经指出这种填充是正常的，会被<code>gzip(1)</code>丢弃。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/54a5287e3e" target="_blank" rel="noopener"><code>54a5287e3e</code></a>, <a href="https://github.com/nodejs/node/pull/5883" target="_blank" rel="noopener">#5883</a></li></ul></li></ul><h2 id="Native-Modules-Addons"><a href="#Native-Modules-Addons" class="headerlink" title="Native Modules (Addons)"></a>Native Modules (Addons)</h2><ul><li>ABI模块由于一个模块初始化的次版本增加已经改变。<ul><li>这仅仅意味着原生插件需要重新编译。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/71470a8e45" target="_blank" rel="noopener"><code>71470a8e45</code></a>, <a href="https://github.com/nodejs/node/pull/4771" target="_blank" rel="noopener">#4771</a></li></ul></li><li><code>NODE_MODULE_VERSION</code>现在是<code>48</code>。</li><li>移除一些之前弃用的内部函数。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/757fbac64b" target="_blank" rel="noopener"><code>757fbac64b</code></a>, <a href="https://github.com/nodejs/node/pull/6053" target="_blank" rel="noopener">#6053</a></li></ul></li></ul><h2 id="General-Node"><a href="#General-Node" class="headerlink" title="General Node"></a>General Node</h2><ul><li>内部工具不再打入node包中，减少了大约10%的体积。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/90a5fc20be" target="_blank" rel="noopener"><code>90a5fc20be</code></a>, <a href="https://github.com/nodejs/node/pull/5695" target="_blank" rel="noopener">#5695</a></li></ul></li><li>现在打印的所有警告以<code>(node:pid)</code>开头。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/d01eb6882f" target="_blank" rel="noopener"><code>d01eb6882f</code></a>, <a href="https://github.com/nodejs/node/pull/3878" target="_blank" rel="noopener">#3878</a>, <a href="https://github.com/nodejs/node/commit/94b9948d63" target="_blank" rel="noopener"><code>94b9948d63</code></a>, <a href="https://github.com/nodejs/node/pull/3833" target="_blank" rel="noopener">#3833</a></li></ul></li><li>现在所有模块的错误消息更加一致。<ul><li>全部由大写字母开头，除此之外不含存在大写字母的普通单词，不含结尾标识。</li><li>另外，参数名和其他代码现在总是被双引号(<code>\&quot;</code>)包围。</li><li>某些情况下，错误会提供更多信息。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/20285ad177" target="_blank" rel="noopener"><code>20285ad177</code></a>, <a href="https://github.com/nodejs/node/pull/3374" target="_blank" rel="noopener">#3374</a>, <a href="https://github.com/nodejs/node/commit/53a95a5b12" target="_blank" rel="noopener"><code>53a95a5b12</code></a>, <a href="https://github.com/nodejs/node/pull/5616" target="_blank" rel="noopener">#5616</a>, <a href="https://github.com/nodejs/node/commit/8bb60e3c8d" target="_blank" rel="noopener"><code>8bb60e3c8d</code></a>, <a href="https://github.com/nodejs/node/pull/5590" target="_blank" rel="noopener">#5590</a>, <a href="https://github.com/nodejs/node/commit/ec49fc8229" target="_blank" rel="noopener"><code>ec49fc8229</code></a>, <a href="https://github.com/nodejs/node/pull/5981" target="_blank" rel="noopener">#5981</a></li></ul></li><li>Node.js不再支持Windows Vista和之前的版本,不会在这些版本上运行。<ul><li>另外，安装程序在这些系统上不会安装。</li><li>现在支持的windows最低版本是Windows 7和Windows Server 2008 R2。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/1cf26c036d" target="_blank" rel="noopener"><code>1cf26c036d</code></a>, <a href="https://github.com/nodejs/node/commit/55db19074d" target="_blank" rel="noopener"><code>55db19074d</code></a>, <a href="https://github.com/nodejs/node/pull/5167" target="_blank" rel="noopener">#5167</a></li></ul></li><li>Node.js不再支持OS X 10.7一下版本。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/204f3a8a0b" target="_blank" rel="noopener"><code>204f3a8a0b</code></a>, <a href="https://github.com/nodejs/node/pull/6402" target="_blank" rel="noopener">#6402</a></li></ul></li><li>通过<code>Makefile</code> (<code>tools/install.py</code>)安装不再尝试改变npm的shebang中的node目标路径为本地构建的路径。<ul><li>保持其为<code>#!/usr/bin/env node</code>，即在全局查找node。</li><li>Refs: <a href="https://github.com/nodejs/node/commit/8ffa20c495" target="_blank" rel="noopener"><code>8ffa20c495</code></a>, <a href="https://github.com/nodejs/node/pull/6098" target="_blank" rel="noopener">#6098</a></li></ul></li></ul><h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><ul><li>现在又支持共享的c-ares builds了。<ul><li>Refs: <a href="https://github.com/nodejs/node/commit/2253be95d0" target="_blank" rel="noopener"><code>2253be95d0</code></a>, <a href="https://github.com/nodejs/node/pull/5775" target="_blank" rel="noopener">#5775</a></li></ul></li><li>升级V8至5.0.71.32 + 浮动补丁。<ul><li>Refs: <a href="https://github.com/nodejs/node/commits/master/deps/v8" target="_blank" rel="noopener">deps/v8</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;英语水平比较渣，如果有翻译不对的地方请指出，谢谢。&lt;br&gt;原文地址：&lt;a href=&quot;https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v5-and-v6.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nodejs - Breaking changes between v5 and v6&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;查看之前的改动日志，请查看&lt;a href=&quot;https://github.com/nodejs/node/wiki/Breaking-changes-between-v4-and-v5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v4 to v5&lt;/a&gt;页面。&lt;/p&gt;
&lt;p&gt;89个提交被标记为&lt;code&gt;semver-major&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>a tool save installed modules but forgot save to npm package.json</title>
    <link href="https://blog.sinalvee.io/2016/03/18/a-tool-save-installed-module-to-npm-package/"/>
    <id>https://blog.sinalvee.io/2016/03/18/a-tool-save-installed-module-to-npm-package/</id>
    <published>2016-03-18T18:08:02.000Z</published>
    <updated>2016-03-18T18:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pkg-save"><a href="#pkg-save" class="headerlink" title="pkg-save"></a>pkg-save</h2><p><a href="https://github.com/SinalVee/pkg-save" target="_blank" rel="noopener">GitHub Repository</a></p><p>Save installed package(s) to package.json.</p><p>Sometimes, I install a npm package but forgot to add <code>--save</code> or <code>--save-dev</code>. What should I do if I want to save this package to <code>package.json</code>?</p><p>I try to google it but no answer found. So, I write <code>pkg-save</code> to do it.</p><a id="more"></a> <h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p><code>npm install pkg-save -g</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>pkg-save &lt;name&gt; [option]</code></p><h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-d, --dev      Save package to devDependencies</span><br><span class="line">-h, --help     Show help</span><br><span class="line">-v, --version  Show version number</span><br></pre></td></tr></table></figure><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkg-save lodash              Save lodash to dependencies</span><br><span class="line">pkg-save lodash --dev        Save lodash to devDependencies</span><br><span class="line">pkg-save lodash mocha        Save lodash and mocha to dependencies</span><br><span class="line">pkg-save lodash mocha --dev  Save lodash and mocha to devDependencies</span><br></pre></td></tr></table></figure><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>MIT</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pkg-save&quot;&gt;&lt;a href=&quot;#pkg-save&quot; class=&quot;headerlink&quot; title=&quot;pkg-save&quot;&gt;&lt;/a&gt;pkg-save&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SinalVee/pkg-save&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Save installed package(s) to package.json.&lt;/p&gt;
&lt;p&gt;Sometimes, I install a npm package but forgot to add &lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt;. What should I do if I want to save this package to &lt;code&gt;package.json&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I try to google it but no answer found. So, I write &lt;code&gt;pkg-save&lt;/code&gt; to do it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
      <category term="npm" scheme="https://blog.sinalvee.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>ES6 + Express + Babel + Gulp + React + Webpack</title>
    <link href="https://blog.sinalvee.io/2016/02/24/es6-express-babel-gulp-react-webpack/"/>
    <id>https://blog.sinalvee.io/2016/02/24/es6-express-babel-gulp-react-webpack/</id>
    <published>2016-02-24T15:06:58.000Z</published>
    <updated>2016-02-24T15:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己动手才发现原来写篇好文章真的是太难了，如果评个等级的话，这篇文章大概是渣渣水平，哈哈。<br>不过，总算是写完了，也算是最近学习的一个总结吧 :)</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><a href="#prepare">准备工作</a></li><li><a href="#toc">项目目录结构</a></li><li><a href="#express">Express</a><ul><li><a href="#express-install">安装</a></li><li><a href="#express-server">写个server测试一下</a></li></ul></li><li><a href="#babel">Babel</a><ul><li><a href="#babel-install">安装</a></li><li><a href="#babelrc">配置.babelrc</a></li><li><a href="#babel-es6">使用es6语法编写代码</a></li><li><a href="#babel-transform">使用bebel转换</a></li></ul></li><li><a href="#gulp">Gulp</a><ul><li><a href="#gulp-install">安装</a></li><li><a href="#gulpfile">编写gulpfile</a><ul><li><a href="#gulpfile-default">一个简单的gulpfile</a></li><li><a href="#gulpfile-watch">能够监听文件更改的gulpfile</a></li></ul></li></ul></li><li><a href="#react-webpack">React + Webpack</a><ul><li><a href="#react-webpack-install">安装</a></li><li><a href="#webpack-config">编写webpack.config.js</a></li><li><a href="#gulp-webpack">在gulp中使用webpack</a></li><li><a href="#react">使用React</a></li></ul></li><li><a href="#summary">总结</a></li></ul><a id="more"></a> <p><a id="prepare"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>作为一个noder，开始一切之前当然少不了<code>npm init</code><br>关于express, babel, gulp, webpack, react本文不进行介绍，如有需要可以到其主页自行了解。<br><a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a><br><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a><br><a href="http://gulpjs.com/" target="_blank" rel="noopener">Gulp</a><br><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React</a><br><a href="https://webpack.github.io/" target="_blank" rel="noopener">Webpack</a></p><p><a id="toc"></a></p><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">├─ lib&#x2F;</span><br><span class="line">├─ public&#x2F;</span><br><span class="line">│  ├─ dist&#x2F;</span><br><span class="line">│  └─ src&#x2F;</span><br><span class="line">│      └─ index.js</span><br><span class="line">├─ src&#x2F;</span><br><span class="line">│  └─ app.js</span><br><span class="line">├─ .babelrc</span><br><span class="line">├─ index.html</span><br><span class="line">├─ gulpfile.babel.js</span><br><span class="line">├─ package.json</span><br><span class="line">├─ README.md</span><br><span class="line">└─ webpack.config.js</span><br></pre></td></tr></table></figure><p><a id="express"></a></p><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p><a id="express-install"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这次准备纯手写，所以不用<code>express-generator</code>生成了，简单的示例尽量不使用多余的中间件。<br><code>npm install --save express body-parser</code></p><p><a id="express-server"></a></p><h3 id="写个server测试一下"><a href="#写个server测试一下" class="headerlink" title="写个server测试一下"></a>写个server测试一下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, router);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server listening at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简单起见，404和error handler就不写了。<br><code>node src/app.js</code>跑起来，浏览器打开<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>，可以看到页面中显示<code>Hello World!</code>了。</p><p><a id="babel"></a></p><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>babel升级到6.x之后，需要明确指定转换，我们使用预设的es2015。</p><p><a id="babel-install"></a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>npm install -g babel-core</code><br><code>npm install --save-dev babel-core babel-preset-es2015</code></p><p><a id="babelrc"></a></p><h3 id="配置-babelrc"><a href="#配置-babelrc" class="headerlink" title="配置.babelrc"></a>配置.babelrc</h3><p>在根目录新建.babelrc文件，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="babel-es6"></a></p><h3 id="使用es6语法编写代码"><a href="#使用es6语法编写代码" class="headerlink" title="使用es6语法编写代码"></a>使用es6语法编写代码</h3><p>我们现在将之前写过的<code>src/app.js</code>修改为es6语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; src&#x2F;app.js</span><br><span class="line"></span><br><span class="line">import express, &#123; Router &#125; from &#39;express&#39;;</span><br><span class="line">import bodyParser from &#39;body-parser&#39;;</span><br><span class="line"></span><br><span class="line">let app &#x3D; express();</span><br><span class="line">let router &#x3D; Router();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;&#39;, (req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  res.end(&#39;Hello World!&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(&#39;&#x2F;&#39;, router);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;server listening at port 3000...&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a id="babel-transform"></a></p><h3 id="使用bebel转换"><a href="#使用bebel转换" class="headerlink" title="使用bebel转换"></a>使用bebel转换</h3><p>将代码修改为es6语法之后，就可以使用babel进行转换了。<br>使用命令<code>babel src -d lib</code><br>可以看到控制台中显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;app.js -&gt; lib&#x2F;app.js</span><br></pre></td></tr></table></figure><p>之后还是运行一下看看效果，浏览器打开<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>，我们和熟悉的<code>Hello World</code>又见面啦。</p><p><a id="gulp"></a></p><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><p>每次修改完代码都要重新用babel转换一次是不是很麻烦？别怕，我们有gulp。</p><p><a id="gulp-install"></a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp-cli</span><br><span class="line">npm install --save-dev gulp gulp-babel</span><br></pre></td></tr></table></figure><p><a id="gulpfile"></a></p><h3 id="编写gulpfile"><a href="#编写gulpfile" class="headerlink" title="编写gulpfile"></a>编写gulpfile</h3><p>在根目录新建一个gulpfile.babel.js文件。<br>gulp原生并不支持es6语法，但是我们可以告诉gulp使用babel将gulpfile转换为es5，方法就是将gulpfile命名为gulpfile.babel.js</p><p><a id="gulpfile-default"></a></p><h4 id="一个简单的gulpfile"><a href="#一个简单的gulpfile" class="headerlink" title="一个简单的gulpfile"></a>一个简单的gulpfile</h4><p>我们先写一个简单的gulpfile测试一下gulp是否能够正常工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &#39;gulp&#39;;</span><br><span class="line">import babel from &#39;gulp-babel&#39;;</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;default&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  return gulp.src(&#39;src&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(&#39;lib&#39;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制台执行<code>gulp</code>，可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[13:00:35] Requiring external module babel-register</span><br><span class="line">[13:00:36] Using gulpfile &#x2F;path&#x2F;to&#x2F;file&#x2F;gulpfile.babel.js</span><br><span class="line">[13:00:36] Starting &#39;default&#39;...</span><br><span class="line">[13:00:36] Finished &#39;default&#39; after 191 ms</span><br></pre></td></tr></table></figure><p>然后lib文件夹下就生成了转换后的文件了。</p><p><a id="gulpfile-watch"></a></p><h4 id="能够监听文件更改的gulpfile"><a href="#能够监听文件更改的gulpfile" class="headerlink" title="能够监听文件更改的gulpfile"></a>能够监听文件更改的gulpfile</h4><p>虽然上面的gulpfile能够将使用了，但是还是跟之前直接用babel一样，每次都要gulp一下，下面我们就来写一个能够监听文件的gulpfile。当文件被修改之后，自动将文件转换。<br>这里使用<code>gulp-watch</code>监听文件更改。<br><code>npm install --save-dev gulp-watch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &#39;gulp&#39;;</span><br><span class="line">import watch from &#39;gulp-watch&#39;;</span><br><span class="line">import babel from &#39;gulp-babel&#39;;</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;transform&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  return gulp.src(&#39;src&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(&#39;lib&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;watch&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  return gulp.src(&#39;src&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    .pipe(watch(&#39;src&#x2F;**&#x2F;*.js&#39;, &#123;</span><br><span class="line">      verbose: true</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(&#39;lib&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;default&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  gulp.start(&#39;transform&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制台执行<code>gulp watch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[14:11:46] Requiring external module babel-register</span><br><span class="line">[14:11:47] Using gulpfile &#x2F;file&#x2F;to&#x2F;path&#x2F;gulpfile.babel.js</span><br><span class="line">[14:11:47] Starting &#39;watch&#39;...</span><br></pre></td></tr></table></figure><p>然后修改app.js并保存，可以看到控制台中多了一行信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[14:13:20] app.js was changed</span><br></pre></td></tr></table></figure><p>对于gulp其他的用法这里就不细说了，有兴趣的可以去看桑大<code>i5ting</code>的<a href="http://i5ting.github.io/stuq-gulp/" target="_blank" rel="noopener">Gulp实战和原理解析（以weui作为项目实例）</a></p><p><a id="react-webpack"></a></p><h2 id="React-Webpack"><a href="#React-Webpack" class="headerlink" title="React + Webpack"></a>React + Webpack</h2><p><a id="react-webpack-install"></a></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>react<br><code>npm install --save react react-dom</code><br>webpack<br><code>npm install --save-dev webpack webpack-dev-server</code><br>为了编译jsx，我们还需要其他一些模块<br><code>npm install --save-dev babel-loader babel-preset-react</code></p><p><a id="webpack-config"></a></p><h3 id="编写webpack-config-js"><a href="#编写webpack-config-js" class="headerlink" title="编写webpack.config.js"></a>编写webpack.config.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">var webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devtool: &#39;eval&#39;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    public: &#39;.&#x2F;public&#x2F;src&#x2F;index&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &#39;public&#x2F;dist&#39;),</span><br><span class="line">    filename: &#39;bundle.js&#39;,</span><br><span class="line">    publicPath: &#39;public&#x2F;dist&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        include: [path.join(__dirname, &#39;public&#x2F;src&#39;)],</span><br><span class="line">        loader: &#39;babel&#39;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [&#39;react&#39;, &#39;es2015&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a id="gulp-webpack"></a></p><h3 id="在gulp中使用webpack"><a href="#在gulp中使用webpack" class="headerlink" title="在gulp中使用webpack"></a>在gulp中使用webpack</h3><p>修改<code>gulpfile.babel.js</code>，添加<code>build</code>和<code>webpack-dev-server</code>任务，分别是生成打包文件和启动开发服务器，并将<code>default</code>修改为同时执行<code>transform</code>和<code>webpack-dev-server</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &#39;gulp&#39;;</span><br><span class="line">import gutil from &#39;gulp-util&#39;;</span><br><span class="line">import watch from &#39;gulp-watch&#39;;</span><br><span class="line">import babel from &#39;gulp-babel&#39;;</span><br><span class="line">import webpack from &#39;webpack&#39;;</span><br><span class="line">import WebpackDevServer from &#39;webpack-dev-server&#39;;</span><br><span class="line"></span><br><span class="line">import webpackConfig from &#39;.&#x2F;webpack.config.js&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; transform</span><br><span class="line">gulp.task(&#39;transform&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  return gulp.src(&#39;src&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(&#39;lib&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; watch transform</span><br><span class="line">gulp.task(&#39;watch-transform&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  return gulp.src(&#39;src&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">    .pipe(watch(&#39;src&#x2F;**&#x2F;*.js&#39;, &#123;</span><br><span class="line">      verbose: true</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(&#39;lib&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;webpack:build&#39;, (callback) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; modify some webpack config options</span><br><span class="line">  var myConfig &#x3D; Object.create(webpackConfig);</span><br><span class="line">  myConfig.plugins &#x3D; myConfig.plugins.concat(</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &#39;process.env&#39;: &#123;</span><br><span class="line">        &#x2F;&#x2F; This has effect on the react lib size</span><br><span class="line">        &#39;NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.optimize.DedupePlugin(),</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; run webpack</span><br><span class="line">  webpack(myConfig, (err, stats) &#x3D;&gt; &#123;</span><br><span class="line">    if (err)</span><br><span class="line">      throw new gutil.PluginError(&#39;webpack:build&#39;, err);</span><br><span class="line">    gutil.log(&#39;[webpack:build]&#39;, stats.toString(&#123;</span><br><span class="line">      colors: true</span><br><span class="line">    &#125;));</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;webpack-dev-server&#39;, (callback) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; modify some webpack config options</span><br><span class="line">  var myConfig &#x3D; Object.create(webpackConfig);</span><br><span class="line">  myConfig.devtool &#x3D; &#39;eval&#39;;</span><br><span class="line">  myConfig.debug &#x3D; true;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Start a webpack-dev-server</span><br><span class="line">  new WebpackDevServer(webpack(myConfig), &#123;</span><br><span class="line">    publicPath: &#39;&#x2F;&#39; + myConfig.output.publicPath,</span><br><span class="line">    stats: &#123;</span><br><span class="line">      colors: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).listen(3001, &#39;localhost&#39;, (err) &#x3D;&gt; &#123;</span><br><span class="line">    if (err) throw new gutil.PluginError(&#39;webpack-dev-server&#39;, err);</span><br><span class="line">    gutil.log(&#39;[webpack-dev-server]&#39;, &#39;http:&#x2F;&#x2F;localhost:3001&#x2F;&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;default&#39;, [&#39;watch-transform&#39;, &#39;webpack-dev-server&#39;]);</span><br></pre></td></tr></table></figure><p><a id="react"></a></p><h3 id="使用React"><a href="#使用React" class="headerlink" title="使用React"></a>使用React</h3><p>在根目录下创建<code>index.html</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Hello Wrold&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:3001&#x2F;public&#x2F;dist&#x2F;bundle.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>之后在<code>public/src</code>目录创建<code>index.js</code>文件，简单的写个hello world.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;Hello Wrold!!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;App /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>控制台执行<code>gulp webpack-dev-server</code>，打开<a href="http://localhost:3001/" target="_blank" rel="noopener">http://localhost:3001</a><br>我们和<code>Hello world!</code>第三次见面了～</p><p><a id="summary"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里文章就结束了，然而这只是文章的结束，现在只是把大体的结构搭建起来了，剩下要做的还有很多，继续加油把～<br>PS: 我也不知道这种目录结构是否合理，如有不同意见，欢迎拍砖～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己动手才发现原来写篇好文章真的是太难了，如果评个等级的话，这篇文章大概是渣渣水平，哈哈。&lt;br&gt;不过，总算是写完了，也算是最近学习的一个总结吧 :)&lt;/p&gt;
&lt;h2 id=&quot;本文目录&quot;&gt;&lt;a href=&quot;#本文目录&quot; class=&quot;headerlink&quot; title=&quot;本文目录&quot;&gt;&lt;/a&gt;本文目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#prepare&quot;&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#toc&quot;&gt;项目目录结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#express&quot;&gt;Express&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#express-install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#express-server&quot;&gt;写个server测试一下&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#babel&quot;&gt;Babel&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#babel-install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#babelrc&quot;&gt;配置.babelrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#babel-es6&quot;&gt;使用es6语法编写代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#babel-transform&quot;&gt;使用bebel转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gulp&quot;&gt;Gulp&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gulp-install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gulpfile&quot;&gt;编写gulpfile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gulpfile-default&quot;&gt;一个简单的gulpfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gulpfile-watch&quot;&gt;能够监听文件更改的gulpfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react-webpack&quot;&gt;React + Webpack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#react-webpack-install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#webpack-config&quot;&gt;编写webpack.config.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gulp-webpack&quot;&gt;在gulp中使用webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#react&quot;&gt;使用React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
      <category term="es2015" scheme="https://blog.sinalvee.io/tags/es2015/"/>
    
      <category term="express" scheme="https://blog.sinalvee.io/tags/express/"/>
    
      <category term="babel" scheme="https://blog.sinalvee.io/tags/babel/"/>
    
      <category term="gulp" scheme="https://blog.sinalvee.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>nodejs articles collection</title>
    <link href="https://blog.sinalvee.io/2016/02/20/nodejs-articles/"/>
    <id>https://blog.sinalvee.io/2016/02/20/nodejs-articles/</id>
    <published>2016-02-20T12:19:32.000Z</published>
    <updated>2016-02-20T12:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/nodejs.png" alt=""><br><strong>This post is used to collect articles about <code>nodejs</code>.</strong></p><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul><li><a href="#es2015">ES2015</a></li><li><a href="#javascript">JavaScript</a></li><li><a href="#koa">Koa</a></li><li><a href="#promise">Promise</a></li></ul><p><a id="es2015"></a></p><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6入门</a><br><a href="http://gank.io/post/564151c1f1df1210001c9161" target="_blank" rel="noopener">给 JavaScript 初心者的 ES2015 实战</a></p><p><a id="javascript"></a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><a href="https://github.com/loverajoel/jstips" target="_blank" rel="noopener">jstips</a> — One JS tip every day!<br><a href="https://cnodejs.org/topic/56a050ac8392272262331d62" target="_blank" rel="noopener">每天一条JS小知识</a> — jstips Chinese translation</p><p><a id="koa"></a></p><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><p><a href="http://base-n.github.io/koa-generator-examples/" target="_blank" rel="noopener">一起学koa</a> — a koa examples book</p><p><a id="promise"></a></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p><a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="noopener">We have a problem with promises</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/nodejs.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;This post is used to collect articles about &lt;code&gt;nodejs&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Ta
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>mongodb备份及恢复</title>
    <link href="https://blog.sinalvee.io/2015/11/11/mongodb-backup-and-restore/"/>
    <id>https://blog.sinalvee.io/2015/11/11/mongodb-backup-and-restore/</id>
    <published>2015-11-11T14:39:30.000Z</published>
    <updated>2015-11-11T14:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p><code>mongodump --host 127.0.0.1 --port 27017 -d {database} --out {out-path}</code></p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p><code>mongorestore -d {database} --drop {src-path}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mongodump --host 127.0.0.1 --port 27017 -d {database} --out {out
      
    
    </summary>
    
    
      <category term="Database" scheme="https://blog.sinalvee.io/categories/Database/"/>
    
      <category term="MongoDB" scheme="https://blog.sinalvee.io/categories/Database/MongoDB/"/>
    
    
      <category term="mongodb" scheme="https://blog.sinalvee.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>使用n更新nodejs</title>
    <link href="https://blog.sinalvee.io/2015/11/06/update-node-with-n/"/>
    <id>https://blog.sinalvee.io/2015/11/06/update-node-with-n/</id>
    <published>2015-11-06T18:50:05.000Z</published>
    <updated>2015-11-06T18:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>node有一个模块叫n，是专门用来管理node.js的版本的。</p><p>第一步：<br>安装n模块<br><code>npm install -g n</code></p><p>第二步：<br>升级node.js到最新稳定版<br><code>n stable</code></p><p>n后面也可以跟随版本号比如：</p><p><code>n v0.10.26</code> 或 <code>n 0.10.26</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node有一个模块叫n，是专门用来管理node.js的版本的。&lt;/p&gt;
&lt;p&gt;第一步：&lt;br&gt;安装n模块&lt;br&gt;&lt;code&gt;npm install -g n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第二步：&lt;br&gt;升级node.js到最新稳定版&lt;br&gt;&lt;code&gt;n stable&lt;/c
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户相关操作</title>
    <link href="https://blog.sinalvee.io/2015/11/06/linux-user-commands/"/>
    <id>https://blog.sinalvee.io/2015/11/06/linux-user-commands/</id>
    <published>2015-11-06T18:21:22.000Z</published>
    <updated>2015-11-06T18:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><code>useradd 选项 用户名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c comment 指定一段注释性描述。</span><br><span class="line">-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</span><br><span class="line">-g 用户组 指定用户所属的用户组。</span><br><span class="line">-G 用户组，用户组 指定用户所属的附加组。</span><br><span class="line">-s Shell文件 指定用户的登录Shell。</span><br><span class="line">-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p><code>userdel 选项 用户名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f, --force    force removal of files, even if not owned by user</span><br><span class="line">-h, --help     display this help message and exit</span><br><span class="line">-r, --remove   remove home directory and mail spool</span><br></pre></td></tr></table></figure><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><p><code>usermod 选项 用户名</code><br>选项与useradd基本一致  </p><h2 id="用户密码管理"><a href="#用户密码管理" class="headerlink" title="用户密码管理"></a>用户密码管理</h2><p><code>passwd 选项 用户名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l 锁定密码，即禁用账号。</span><br><span class="line">-u 密码解锁。</span><br><span class="line">-d 使账号无密码。</span><br><span class="line">-f 强迫用户下次登录时修改密码。</span><br><span class="line">如果不使用用户名，则修改当前用户的密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h2&gt;&lt;p&gt;&lt;code&gt;useradd 选项 用户名&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git添加多个远程url</title>
    <link href="https://blog.sinalvee.io/2015/11/06/add-origin-urls-to-git-repo/"/>
    <id>https://blog.sinalvee.io/2015/11/06/add-origin-urls-to-git-repo/</id>
    <published>2015-11-06T11:11:14.000Z</published>
    <updated>2015-11-06T11:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设要添加的三个url为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;url1&gt;: https:&#x2F;&#x2F;github.com&#x2F;sinalvee&#x2F;111.git</span><br><span class="line">&lt;url2&gt;: https:&#x2F;&#x2F;github.com&#x2F;sinalvee&#x2F;222.git</span><br><span class="line">&lt;url3&gt;: https:&#x2F;&#x2F;github.com&#x2F;sinalvee&#x2F;222.git</span><br></pre></td></tr></table></figure><p>使用如下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;url1&gt;</span><br><span class="line">git remote set-url --add origin &lt;url2&gt;</span><br><span class="line">git remote set-url --add origin &lt;url3&gt;</span><br></pre></td></tr></table></figure><p>push的时候直接<code>git push origin master</code>即可依次向三个地址提交</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设要添加的三个url为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.sinalvee.io/categories/Git/"/>
    
    
      <category term="git" scheme="https://blog.sinalvee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Sails+wechat(解决sails无法处理微信消息)</title>
    <link href="https://blog.sinalvee.io/2015/09/18/sails-wechat/"/>
    <id>https://blog.sinalvee.io/2015/09/18/sails-wechat/</id>
    <published>2015-09-18T14:06:04.000Z</published>
    <updated>2015-09-18T14:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/balderdashy/sails" target="_blank" rel="noopener">sails</a>框架使用<a href="https://github.com/node-webot/wechat" target="_blank" rel="noopener">wechat</a> 的时候能够通过验证却不能处理微信消息，原因是sails默认的bodyPaser(<a href="https://github.com/balderdashy/skipper" target="_blank" rel="noopener">skipper</a>)不支持’text/xml’形式的请求(<a href="https://github.com/balderdashy/sails/issues/2714" target="_blank" rel="noopener">sails issues#2714</a>)</p><p>YunnuY同学使用<a href="https://www.npmjs.com/package/express-xml-bodyparser" target="_blank" rel="noopener">express-xml-bodyparser</a>和<a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">body-parser</a>覆盖了sails默认的bodyParser</p><p><a href="https://github.com/YunnuY/sweat/blob/master/config/http.js" target="_blank" rel="noopener">https://github.com/YunnuY/sweat/blob/master/config/http.js</a></p><p>由于body-paser后来更新，所以这里的代码要稍微修改一下,将<code>var bodyParser = require(&#39;body-parser&#39;)();</code>修改为<code>var bodyParser = require(&#39;body-parser&#39;)().json();</code></p><hr><p>但是公司的项目中还有包含文件的请求，此时body-paser就不能满足需求了，因此还是要重新使用sails默认的skipper，代码如下：</p><pre><code>bodyParser: function() {    var xmlParser = require(&apos;express-xml-bodyparser&apos;)();  var skipper = require(&apos;skipper&apos;)();  return function(req, res, next) {    if (req.headers &amp;amp;&amp;amp; (req.headers[&apos;content-type&apos;] == &apos;text/xml&apos; || req.headers[&apos;content-type&apos;] == &apos;application/xml&apos;)) {      return xmlParser(req, res, next);    }    return skipper(req, res, next);  };}</code></pre><p>目前程序能够正常处理微信消息和常规请求，如果出现问题我会及时更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/balderdashy/sails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sails&lt;/a&gt;框架使用&lt;a href=&quot;https://github.com/node-webot/wechat&quot;
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://blog.sinalvee.io/categories/NodeJS/"/>
    
    
      <category term="nodejs" scheme="https://blog.sinalvee.io/tags/nodejs/"/>
    
      <category term="sails" scheme="https://blog.sinalvee.io/tags/sails/"/>
    
      <category term="wechat" scheme="https://blog.sinalvee.io/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>Java实现二叉查找树转为排序的双向链表</title>
    <link href="https://blog.sinalvee.io/2015/06/13/binary-search-tree-to-sorted-doubly-linked-list-in-java/"/>
    <id>https://blog.sinalvee.io/2015/06/13/binary-search-tree-to-sorted-doubly-linked-list-in-java/</id>
    <published>2015-06-13T17:05:49.000Z</published>
    <updated>2015-06-13T17:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.把二元查找树转变成排序的双向链表<br>题目：<br>输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。<br>要求不能创建任何新的结点，只调整指针的指向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     10</span><br><span class="line">   &#x2F;    \</span><br><span class="line">  6      14</span><br><span class="line"> &#x2F; \    &#x2F;  \</span><br><span class="line">4   8  12  16</span><br></pre></td></tr></table></figure><p>转换成双向链表<br>4=6=8=10=12=14=16。<br>首先我们定义的二元查找树节点的数据结构如下：<br>struct BSTreeNode<br>{<br>int m_nValue; // value of node<br>BSTreeNode *m_pLeft; // left child of node<br>BSTreeNode *m_pRight; // right child of node<br>};</p><pre class="lang:java decode:true ">class BSTreeToDoubleLinkNode {    //二叉树类    class BSTreeNode {        Integer m_value;        BSTreeNode m_left;        BSTreeNode m_right;        //二叉树添加新节点        public void addNewBSTreeNode(int value) {            if (m_value == null) {                m_value = value;            } else if (m_value > value) {                if (m_left == null) {                    m_left = new BSTreeNode();                    m_left.addNewBSTreeNode(value);                } else {                    m_left.addNewBSTreeNode(value);                }            } else if (m_value < value) {                if (m_right == null) {                    m_right = new BSTreeNode();                    m_right.addNewBSTreeNode(value);                } else {                    m_right.addNewBSTreeNode(value);                }            } else {                System.out.println("repeat node.");            }        }    }    //双向链表索引    BSTreeNode pIndex = null;    BSTreeNode pHead = null;    //中序遍历二叉树    public void inOrderTraversal(BSTreeNode pNode) {        if (pNode == null) {            System.out.println("pNode is null.");            return;        } else {            if (pNode.m_left != null) {                inOrderTraversal(pNode.m_left);            }            //转换当前节点为链表            convertToDoubleLinkNode(pNode);            if (pNode.m_right != null) {                inOrderTraversal(pNode.m_right);            }        }    }    //转换当前节点为链表    public void convertToDoubleLinkNode(BSTreeNode pNode) {        pNode.m_left = pIndex;        if (null == pIndex) {            pHead = pNode;        } else {            pIndex.m_right = pNode;        }        pIndex = pNode;        System.out.print(pNode.m_value + " ");    }    public static void main(String[] args) {        BSTreeToDoubleLinkNode b = new BSTreeToDoubleLinkNode();        BSTreeNode pNode = b.new BSTreeNode();        pNode.addNewBSTreeNode(10);        pNode.addNewBSTreeNode(6);        pNode.addNewBSTreeNode(14);        pNode.addNewBSTreeNode(4);        pNode.addNewBSTreeNode(8);        pNode.addNewBSTreeNode(12);        pNode.addNewBSTreeNode(16);        b.inOrderTraversal(pNode);    }}</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.把二元查找树转变成排序的双向链表&lt;br&gt;题目：&lt;br&gt;输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。&lt;br&gt;要求不能创建任何新的结点，只调整指针的指向。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://blog.sinalvee.io/categories/Algorithm/Data-Structure/"/>
    
    
      <category term="java" scheme="https://blog.sinalvee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>配置gvim使之不自动生成备份文件的方法</title>
    <link href="https://blog.sinalvee.io/2015/03/26/gvim-nobackup/"/>
    <id>https://blog.sinalvee.io/2015/03/26/gvim-nobackup/</id>
    <published>2015-03-26T14:59:01.000Z</published>
    <updated>2015-03-26T14:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下使用gvim，在保存文件时会自动产生带~号的备份文件，强迫症选手真是受不了，现给出解决方案：</p><p>1.打开gvim，选择菜单栏的编辑-启动设定<br>2.在“behave mswin”下方添加一行 set nobackup<br>3.:wq 退出并保存</p><p>以上，解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下使用gvim，在保存文件时会自动产生带~号的备份文件，强迫症选手真是受不了，现给出解决方案：&lt;/p&gt;
&lt;p&gt;1.打开gvim，选择菜单栏的编辑-启动设定&lt;br&gt;2.在“behave mswin”下方添加一行 set nobackup&lt;br&gt;3.:wq 退出并保存&lt;
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://blog.sinalvee.io/categories/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>c3p0配置信息</title>
    <link href="https://blog.sinalvee.io/2014/12/31/c3p0-config/"/>
    <id>https://blog.sinalvee.io/2014/12/31/c3p0-config/</id>
    <published>2014-12-31T10:13:15.000Z</published>
    <updated>2014-12-31T10:13:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>c3p0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--两次连接中间隔时间，单位毫秒。Default: 1000 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryDelay"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--连接关闭时默认将所有未提交的操作回滚。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"automaticTestTable"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"breakAfterAcquireFailure"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTesterClassName"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"factoryClassLocation"</span>&gt;</span>null<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.（文档原文）作者强烈建议不使用的一个属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceIgnoreUnresolvedTransactions"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>15<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numHelperThreads"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0的数据源时。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overrideDefaultUser"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--与overrideDefaultUser参数对应使用的一个参数。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overrideDefaultPassword"</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--密码。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：测试的表必须在初始数据源的时候就存在。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span>&gt;</span>select id from test where id=1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用户修改系统配置参数执行前最多等待300秒。Default: 300 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyCycle"</span>&gt;</span>300<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用户名。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Hibernate（spring管理）中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>oracle.jdbc.driver.OracleDriver<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:oracle:thin:@localhost:1521:Test<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>Kay<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最小连接数。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"1800"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"breakAfterAcquireFailure"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;c3p0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.sinalvee.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.sinalvee.io/tags/java/"/>
    
      <category term="c3p0" scheme="https://blog.sinalvee.io/tags/c3p0/"/>
    
  </entry>
  
  <entry>
    <title>JDBC事务处理</title>
    <link href="https://blog.sinalvee.io/2014/12/30/jdbc-transaction/"/>
    <id>https://blog.sinalvee.io/2014/12/30/jdbc-transaction/</id>
    <published>2014-12-30T16:45:02.000Z</published>
    <updated>2014-12-30T16:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在JDBC中，事务操作默认是自动提交。也就是说，一条对数据库的更新表达式代表一项事务操作。操作成功后，系统将自动调用<code>commit()</code>来提交，否则将调用<code>rollback()</code>来回退。<br>可以通过调用<code>setAutoCommit(false)</code>来禁止自动提交。之后就可以把多个数据库操作的表达式作为一个事务，在操作完成后调用<code>commit()</code>来进行整体提交。<br>倘若其中一个表达式操作失败，都不会执行到<code>commit()</code>，并且将产生响应的异常。此时就可以在异常捕获时调用<code>rollback()</code>进行回退。<br>这样做可以保持多次更新操作后，相关数据的一致性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2014年12月30日16:24:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">Connection conn;</span><br><span class="line">Statement stat;</span><br><span class="line">ResultSet rs;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@127.0.0.1:1521:orcl"</span>, <span class="string">"test"</span>, <span class="string">"test"</span>);</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    stat = conn.createStatement();</span><br><span class="line"></span><br><span class="line">    stat.executeUpdate(<span class="string">"INSERT INTO student VALUES('00001', '老大', '男', '22', 'AA')"</span>);</span><br><span class="line">    stat.executeUpdate(<span class="string">"INSERT INTO student VALUES('00002', '老二', '女', '42', 'BB')"</span>);</span><br><span class="line"></span><br><span class="line">    conn.commit();</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn.rollback();</span><br><span class="line">        System.out.println(<span class="string">"回滚成功"</span>);</span><br><span class="line">        conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JDBC中，事务操作默认是自动提交。也就是说，一条对数据库的更新表达式代表一项事务操作。操作成功后，系统将自动调用&lt;code&gt;commit()&lt;/code&gt;来提交，否则将调用&lt;code&gt;rollback()&lt;/code&gt;来回退。&lt;br&gt;可以通过调用&lt;code&gt;setAut
      
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.sinalvee.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.sinalvee.io/tags/java/"/>
    
      <category term="jdbc" scheme="https://blog.sinalvee.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7编译安装git并配置使用github</title>
    <link href="https://blog.sinalvee.io/2014/12/26/centos7-git-github/"/>
    <id>https://blog.sinalvee.io/2014/12/26/centos7-git-github/</id>
    <published>2014-12-26T14:34:33.000Z</published>
    <updated>2014-12-26T14:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、编译安装git"><a href="#一、编译安装git" class="headerlink" title="一、编译安装git"></a>一、编译安装git</h2><p>CentOS7默认安装的git版本为1.8.3.1，而git官方的版本已经到2.2.0了，所以选择下载源码编译安装git</p><h3 id="1-clone-github上的git源码"><a href="#1-clone-github上的git源码" class="headerlink" title="1.clone github上的git源码"></a>1.clone github上的git源码</h3><p><code>$ git clone https://github.com/git/git.git</code></p><h3 id="2-进入git目录进行配置及安装"><a href="#2-进入git目录进行配置及安装" class="headerlink" title="2.进入git目录进行配置及安装"></a>2.进入git目录进行配置及安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd git</span><br><span class="line">$ autoconf</span><br><span class="line">$ .&#x2F;configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>期间可能会提示缺少文件，是因为git的依赖包没有安装，缺什么装什么就好，或者直接<br><code>yum -y install curl curl-devel zlib-devel openssl-deve perl perl-devel cpio expat-devel gettext-deve</code></p><h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3.查看版本"></a>3.查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><p>竟然还是原来的版本而不是最新安装的2.2.0，那只能先把旧版本卸载了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -q git</span><br><span class="line">git-1.8.3.1-4.el7.x86_64</span><br><span class="line">$ sudo rpm -e --nodeps git-1.8.3.1-4.el7.x86_64</span><br></pre></td></tr></table></figure><p>然后执行<br><code>sudo ln -s /usr/local/bin/* /usr/bin/</code><br>再次查看git版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.2.0.GIT</span><br></pre></td></tr></table></figure><p>git版本已经是我们新安装的2.2.0了</p><h3 id="4-设置自己的用户名和邮箱"><a href="#4-设置自己的用户名和邮箱" class="headerlink" title="4.设置自己的用户名和邮箱"></a>4.设置自己的用户名和邮箱</h3><p>命令行输入：（引号加不加无所谓）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="5-在本地创建仓库并初始化"><a href="#5-在本地创建仓库并初始化" class="headerlink" title="5.在本地创建仓库并初始化"></a>5.在本地创建仓库并初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>初始化空的 Git 版本库于 <code>/home/username/github/test/.git/</code><br>至此git安装完成</p><h2 id="二、使用github"><a href="#二、使用github" class="headerlink" title="二、使用github"></a>二、使用github</h2><p>1.注册github账号</p><p>我这里创建了一个账号：<code>SinalVee</code>，并创建了一个<code>Test</code>仓库用于测试</p><p>2.用ssh-kengen生成公钥</p><p><code>$ ssh-keygen -t rsa -C xxx@xxx.com</code><br><a href="mailto:xxx@xxx.com">xxx@xxx.com</a>为你的邮箱地址</p><p>设定存放目录和密码后在github设置中找到SSH Keys，选择Add SSH Key，设置名称并把<code>*/.ssh/id_rsa.pub</code>的文件内容粘贴进去</p><p>3.测试是否成功</p><p><code>$ ssh -T git@github.com</code><br>出现下面的信息并提示验证私钥则成功，输入密码解锁私钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (192.30.252.130)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:axxxxxxxxxxxxxxxxx:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line">Warning: Permanently added &#39;github.com,192.30.252.130&#39; (RSA) to the list of known hosts.</span><br><span class="line">Hi SinalVee! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>在本地任意目录新建同步文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir github</span><br><span class="line">$ cd github</span><br><span class="line">$ git clone git@github.com:SinalVee&#x2F;Test（此处SinalVee为用户名，Test是你在github上创建的仓库）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正克隆到 &#39;Test&#39;...</span><br><span class="line">Warning: Permanently added the RSA host key for IP address &#39;192.30.252.131&#39; to the list of known hosts.</span><br><span class="line">remote: Counting objects: 6, done.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">接收对象中: 100% (6&#x2F;6), 完成.</span><br><span class="line">检查连接... 完成。</span><br></pre></td></tr></table></figure><p>因为我很久之前就创建了这个Test仓库并测试过，所以这里共有6个objects（一共两个文件，之所以这里是6是因为Git跟踪并管理的是修改，而非文件）。</p><p>接下来测试以下上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cd Test&#x2F;</span><br><span class="line">$ ls</span><br><span class="line">README.md  test.txt</span><br><span class="line">$ touch hello.txt</span><br><span class="line">$ vim hello.txt</span><br><span class="line">你好，这是一个测试文件。</span><br><span class="line">$ ls</span><br><span class="line">hello.txt  README.md  test.txt</span><br><span class="line">$ git add hello.txt</span><br><span class="line">$ git commit -m &quot;add file hello.txt&quot;</span><br><span class="line">[master 0e4004c] add file hello.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line">$ git push</span><br><span class="line">对象计数中: 3, 完成.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">压缩对象中: 100% (2&#x2F;2), 完成.</span><br><span class="line">写入对象中: 100% (3&#x2F;3), 354 bytes | 0 bytes&#x2F;s, 完成.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:sinalvee&#x2F;Test</span><br><span class="line">   984cabc..0e4004c  master -&gt; master</span><br></pre></td></tr></table></figure><p>在github的网页上刷新一下仓库，发现hello.txt已经上传成功了，至此我们的github已经配置成功，并可以使用了。</p><p>github的使用这里不多赘述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、编译安装git&quot;&gt;&lt;a href=&quot;#一、编译安装git&quot; class=&quot;headerlink&quot; title=&quot;一、编译安装git&quot;&gt;&lt;/a&gt;一、编译安装git&lt;/h2&gt;&lt;p&gt;CentOS7默认安装的git版本为1.8.3.1，而git官方的版本已经到2.2.
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
      <category term="CentOS" scheme="https://blog.sinalvee.io/categories/Linux/CentOS/"/>
    
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
      <category term="centos" scheme="https://blog.sinalvee.io/tags/centos/"/>
    
      <category term="git" scheme="https://blog.sinalvee.io/tags/git/"/>
    
      <category term="github" scheme="https://blog.sinalvee.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装SQL Developer读条后闪退解决方案</title>
    <link href="https://blog.sinalvee.io/2014/12/26/centos7-sqldeveloper/"/>
    <id>https://blog.sinalvee.io/2014/12/26/centos7-sqldeveloper/</id>
    <published>2014-12-26T10:30:39.000Z</published>
    <updated>2014-12-26T10:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：</p><p>在CentOS7下安装了sqldeveloper,启动时读条后闪退</p><p>sudo执行正常启动</p><p>错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[xxx@xxx sqldeveloper]$ .&#x2F;sqldeveloper.sh</span><br><span class="line"></span><br><span class="line"> Oracle SQL Developer</span><br><span class="line"> Copyright (c) 1997, 2014, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line"> LOAD TIME : 525#</span><br><span class="line"># A fatal error has been detected by the Java Runtime Environment:</span><br><span class="line">#</span><br><span class="line">#  SIGSEGV (0xb) at pc&#x3D;0x00007f94149ab140, pid&#x3D;19381, tid&#x3D;140274573408000</span><br><span class="line">#</span><br><span class="line"># JRE version: Java(TM) SE Runtime Environment (7.0_71-b14) (build 1.7.0_71-b14)</span><br><span class="line"># Java VM: Java HotSpot(TM) 64-Bit Server VM (24.71-b01 mixed mode linux-amd64 compressed oops)</span><br><span class="line"># Problematic frame:</span><br><span class="line"># C  0x00007f94149ab140</span><br><span class="line">#</span><br><span class="line"># Failed to write core dump. Core dumps have been disabled. To enable core dumping, try &quot;ulimit -c unlimited&quot; before starting Java again</span><br><span class="line">#</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># &#x2F;tmp&#x2F;hs_err_pid19381.log</span><br><span class="line">#</span><br><span class="line"># If you would like to submit a bug report, please visit:</span><br><span class="line">#   http:&#x2F;&#x2F;bugreport.sun.com&#x2F;bugreport&#x2F;crash.jsp</span><br><span class="line">#</span><br><span class="line">&#x2F;opt&#x2F;sqldeveloper&#x2F;sqldeveloper&#x2F;bin&#x2F;..&#x2F;..&#x2F;ide&#x2F;bin&#x2F;launcher.sh: 行 1193: 19381 已放弃               (吐核)$&#123;JAVA&#125; &quot;$&#123;APP_VM_OPTS[@]&#125;&quot; $&#123;APP_ENV_VARS&#125; -classpath $&#123;APP_CLASSPATH&#125; $&#123;APP_MAIN_CLASS&#125; &quot;$&#123;APP_APP_OPTS[@]&#125;&quot;</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>进入<code>{sqldeveloper_home}/sqldeveloper/bin/</code>目录，编辑该目录下的sqldeveloper文件，添加如下两行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset GNOME_DESKTOP_SESSION_ID</span><br><span class="line">unset DBUS_SESSION_BUS_ADDRESS</span><br></pre></td></tr></table></figure><p>再次运行./sqldeveloper.sh，问题解决，成功运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;在CentOS7下安装了sqldeveloper,启动时读条后闪退&lt;/p&gt;
&lt;p&gt;sudo执行正常启动&lt;/p&gt;
&lt;p&gt;错误信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
      <category term="CentOS" scheme="https://blog.sinalvee.io/categories/Linux/CentOS/"/>
    
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
      <category term="centos" scheme="https://blog.sinalvee.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Maven仓库中添加Oracle JDBC驱动</title>
    <link href="https://blog.sinalvee.io/2014/12/18/maven-oracle-jdbc-driver/"/>
    <id>https://blog.sinalvee.io/2014/12/18/maven-oracle-jdbc-driver/</id>
    <published>2014-12-18T16:10:08.000Z</published>
    <updated>2014-12-18T16:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="http://maosheng.iteye.com/blog/2001615" target="_blank" rel="noopener">http://maosheng.iteye.com/blog/2001615</a></p><p>由于Oracle授权问题，Maven不提供Oracle JDBC driver，为了在Maven项目中应用Oracle JDBC driver,必须手动添加到本地仓库。</p><h2 id="一-获得Oracle-JDBC-Driver"><a href="#一-获得Oracle-JDBC-Driver" class="headerlink" title="一.获得Oracle JDBC Driver"></a>一.获得Oracle JDBC Driver</h2><p>1.通过Oracle官方网站下载相应版本：<a href="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html</a></p><p>2.通过Oracle的安装目录获得，位置在“{ORACLE_HOME}jdbclibojdbc14.jar”</p><h2 id="二-手动安装到本地仓库"><a href="#二-手动安装到本地仓库" class="headerlink" title="二.手动安装到本地仓库"></a>二.手动安装到本地仓库</h2><p>命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId&#x3D;com.oracle -DartifactId&#x3D;ojdbc14 -Dversion&#x3D;10.2.0.1.0 -Dpackaging&#x3D;jar -Dfile&#x3D;D:ojdbc14.jar</span><br></pre></td></tr></table></figure><h2 id="三-在pom-xml文件中添加引用"><a href="#三-在pom-xml文件中添加引用" class="headerlink" title="三.在pom.xml文件中添加引用"></a>三.在pom.xml文件中添加引用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.2.0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后就可以正常引用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;http://maosheng.iteye.com/blog/2001615&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://maosheng.iteye.com/blog/2001615&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于
      
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.sinalvee.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.sinalvee.io/tags/java/"/>
    
      <category term="oracle" scheme="https://blog.sinalvee.io/tags/oracle/"/>
    
      <category term="jdbc" scheme="https://blog.sinalvee.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Oracle中的自增实现(mysql中的auto_increment)</title>
    <link href="https://blog.sinalvee.io/2014/12/17/oracle-auto-increment/"/>
    <id>https://blog.sinalvee.io/2014/12/17/oracle-auto-increment/</id>
    <published>2014-12-17T18:13:16.000Z</published>
    <updated>2014-12-17T18:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>自增功能在数据库应用中很广泛，但是Oracle中却没有如mysql中auto_increment那么简单的创建自增，不过实现起来也不麻烦，现在用一个例子来说明自增的实现：</p><h2 id="1-建立数据表"><a href="#1-建立数据表" class="headerlink" title="1.建立数据表"></a>1.建立数据表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t_user(</span><br><span class="line">    user_id integer primary key,</span><br><span class="line">    user_name varchar2(20),</span><br><span class="line">    user_age integer</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="2-创建squence"><a href="#2-创建squence" class="headerlink" title="2.创建squence"></a>2.创建squence</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create sequence t_user_seq</span><br><span class="line">       minvalue 1</span><br><span class="line">       maxvalue 99999999</span><br><span class="line">       increment by 1</span><br><span class="line">       start with 1;</span><br></pre></td></tr></table></figure><p>Name : 创建的名字<br>Min value : 最小计数<br>Max value : 最大计数<br>Start with : 起始计数<br>Increment by : 步长<br>Cache size : 缓存序列<br>指定Cache，oracle会预先在内存中放置一组指定大小的序列，当使用完这些序列后再生成下一组，这样会存取得快些，但当数据库关闭等情况时，下一次再生成序列时可能会使序列间断，不是一串连续的号，当不是特别需要连续的序列时最好指定；不填写Cache值，会使用默认设置；当Cache size设置为0时 为nocache，这样会产生连续的序列。<br>Cycle : 循环序列，当到达最大值后从最小值重新开始<br>Order : 保证序列产生的顺序和请求的顺序是一致的，在并行模式下如果A、B同时对序列请求那么先产生的序列号必然返回给先请求的用户。例如当前序列号为10，A先请求B后请求那么11一定返回给A，12给B，在noorder的情况下，有可能11给B，12给A。这种情况只发生在oracle并行服务器上，大多数情况下不需要。</p><h2 id="3-创建触发器-Trigger"><a href="#3-创建触发器-Trigger" class="headerlink" title="3.创建触发器(Trigger)"></a>3.创建触发器(Trigger)</h2><figure class="highlight plain"><figcaption><span>or replace trigger t_user_tri</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before insert on t_user &#x2F;*触发条件：当向表dectuser执行插入操作时触发此触发器*&#x2F;</span><br><span class="line">for each row  &#x2F;*对每一行都检测是否触发*&#x2F;</span><br><span class="line">begin &#x2F;*触发器开始*&#x2F;</span><br><span class="line">    select t_user_seq.nextval into :new.user_id from dual;  &#x2F;*触发器主题内容，即触发后执行的动作，在此是取得序列t_user_seq的下一个值插入到表t_user中的user_id字段中,注意：new.user_id 是new.加上原表的主键*&#x2F;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>到此oracle中自增的实现已经完成了，可以试着插入一条记录看一看是否成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自增功能在数据库应用中很广泛，但是Oracle中却没有如mysql中auto_increment那么简单的创建自增，不过实现起来也不麻烦，现在用一个例子来说明自增的实现：&lt;/p&gt;
&lt;h2 id=&quot;1-建立数据表&quot;&gt;&lt;a href=&quot;#1-建立数据表&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Database" scheme="https://blog.sinalvee.io/categories/Database/"/>
    
      <category term="Oracle" scheme="https://blog.sinalvee.io/categories/Database/Oracle/"/>
    
    
      <category term="oracle" scheme="https://blog.sinalvee.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Java中int和Integer的区别及如何相互转换</title>
    <link href="https://blog.sinalvee.io/2014/11/23/int-and-integer-in-java/"/>
    <id>https://blog.sinalvee.io/2014/11/23/int-and-integer-in-java/</id>
    <published>2014-11-23T16:00:27.000Z</published>
    <updated>2014-11-23T16:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>两周前参加了一场比试，笔试中有<code>int</code>和<code>Integer</code>相互转换的题，自己答的不是很有把握，不过没有及时查阅资料，后来就忘记了。<br>今天看笔试题的时候看到<code>int</code>和<code>Integer</code>的区别突然想到之前的那道题，查了下资料，现在把它记录下来。</p><h2 id="Java中int和Integer的区别"><a href="#Java中int和Integer的区别" class="headerlink" title="Java中int和Integer的区别"></a>Java中int和Integer的区别</h2><p>int是Java提供的8种原始数据类型之一。Java为每个原始数据类型提供了封装类，Integer是Java为int提供的封装类。</p><p>int的默认值为0，而Integer的默认值为null，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况。例如，要想表达出没有参加考试和考试成绩为0的区别，则只能用Integer。</p><p>另外，Integer提供了多个与整数相关的操作方法，例如，将一个字符串转换成整数<code>Integer.parseInt(String str)</code>，Integer中还定义了表示整数的最大值和最小值的常量。</p><h2 id="int和Integer的互相转换"><a href="#int和Integer的互相转换" class="headerlink" title="int和Integer的互相转换"></a>int和Integer的互相转换</h2><h3 id="1-int转换为Integer"><a href="#1-int转换为Integer" class="headerlink" title="1.int转换为Integer"></a>1.int转换为Integer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">Integer A = <span class="keyword">new</span> Integer(a);</span><br><span class="line"><span class="number">2</span>)</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">Integer A = Integer.valueOf(a);</span><br></pre></td></tr></table></figure><h3 id="2-Integer转换为int"><a href="#2-Integer转换为int" class="headerlink" title="2.Integer转换为int"></a>2.Integer转换为int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer A = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> a = A.valueOf();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两周前参加了一场比试，笔试中有&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;Integer&lt;/code&gt;相互转换的题，自己答的不是很有把握，不过没有及时查阅资料，后来就忘记了。&lt;br&gt;今天看笔试题的时候看到&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;Integer&lt;/co
      
    
    </summary>
    
    
      <category term="Java" scheme="https://blog.sinalvee.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://blog.sinalvee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu英文环境下使用中文输入法</title>
    <link href="https://blog.sinalvee.io/2014/03/13/using-chinese-in-ubuntu/"/>
    <id>https://blog.sinalvee.io/2014/03/13/using-chinese-in-ubuntu/</id>
    <published>2014-03-13T18:52:34.000Z</published>
    <updated>2014-03-13T18:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了和小伙伴们一起dota2，下载了steam for linux，无奈中文环境下无法在steam上敲字，于是乎换到英文环境，字是能敲了，但是另外一个问题出现了，按ctrl+space无法调出中文输入法了</p><p>一通google&amp;baidu之后，找到了解决方案</p><p>1.依次进入System Settings &gt; Language Support &gt; Install / Remove Languages…<br>弹出窗口中选择 Chinese 并且 Apply Changes<br>（ps:我这里之前是中文环境，所以chinese已经安装了，所以这一步没有进行）</p><p>2.Keyboard input method system 选择 ibus</p><p>3.Dash home中搜索ibus Keyboard Input Method,打开<br>在IBus Preferences &gt; Input Method 中选择 Chinese - Pinyin 就解决了</p><hr><p>中文输入的问题解决，But….<br>steam只能打英文 = =  ctrl+space无法调出中文输入法……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了和小伙伴们一起dota2，下载了steam for linux，无奈中文环境下无法在steam上敲字，于是乎换到英文环境，字是能敲了，但是另外一个问题出现了，按ctrl+space无法调出中文输入法了&lt;/p&gt;
&lt;p&gt;一通google&amp;amp;baidu之后，找到了解决方
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="https://blog.sinalvee.io/categories/Linux/Ubuntu/"/>
    
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://blog.sinalvee.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>LNMP1.0配置php与jsp共存</title>
    <link href="https://blog.sinalvee.io/2013/12/16/lnmp-php-jsp/"/>
    <id>https://blog.sinalvee.io/2013/12/16/lnmp-php-jsp/</id>
    <published>2013-12-16T11:29:59.000Z</published>
    <updated>2013-12-16T11:29:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近更换了一个vps，新的vps当然需要重新配置环境了，之前用的vps死活弄不好php与jsp共存，一直是我心中的痛…<br>换了新的继续试一试能不能弄好，没想到一试真的配置好了，记录一下，以后没准还会用到。</p><p>安装lnmp之类的就不详细赘述了，都是很简单的操作，只简单说一下需要安装的有哪些东西，括号里是我本次安装的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lnmp(1.0) &#x2F;usr&#x2F;local&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;mysql &#x2F;usr&#x2F;local&#x2F;php</span><br><span class="line">jdk(7u45) &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;jdk1.7.0_45</span><br><span class="line">tomcat(7.0.47) &#x2F;usr&#x2F;local&#x2F;tomcat7</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="1-jdk"><a href="#1-jdk" class="headerlink" title="1.jdk"></a>1.jdk</h3><p>jdk安装之后需要配置<code>/etc/profile</code><br><code>vi /etc/profile</code> 在文件的最后加入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;jdk&#x2F;jdk1.7.0_45&quot;</span><br><span class="line">CLASS_PATH&#x3D;&quot;$JAVA_HOME&#x2F;lib:$FAVA_HOME&#x2F;jre&#x2F;lib&quot;</span><br><span class="line">PATH&#x3D;&quot;.:$PATH:$JAVA_HOME&#x2F;bin&quot;</span><br><span class="line">CATALINA_HOME&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;tomcat7&quot;</span><br><span class="line">export JAVA_HOME CATALINA_HOME</span><br></pre></td></tr></table></figure><p>保存之后控制台运行<code>source /etc/profile</code>命令<br>可运行<code>java -version</code>检测jdk是否安装成功</p><h3 id="2-tomcat"><a href="#2-tomcat" class="headerlink" title="2.tomcat"></a>2.tomcat</h3><p>tomcat安装后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -rf &#x2F;usr&#x2F;local&#x2F;tomcat7&#x2F;webapps&#x2F;* &#x2F;home&#x2F;wwwroot&#x2F;jsp&#x2F;</span><br><span class="line">vi &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;conf&#x2F;server.xml</span><br></pre></td></tr></table></figure><p>查找<code>appBase=&quot;webapps&quot;</code>，修改为：<code>appBase=&quot;/home/wwwroot/jsp/&quot;</code>,其中<code>/home/wwwroot/jsp/</code>为网站的根目录<br>安装修改后，启动tomcat<br><code>/usr/local/tomcat7/bin/startup.sh</code><br><code>netstat -ntl</code> 看有没有8080端口<br>关闭tomcat<br><code>/usr/local/tomcat7/bin/shutdown.sh</code></p><h2 id="nginx-与-tomcat-配置"><a href="#nginx-与-tomcat-配置" class="headerlink" title="nginx 与 tomcat 配置"></a>nginx 与 tomcat 配置</h2><p><code>vi /usr/local/nginx/conf/nginx.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">worker_processes 8;</span><br><span class="line">#worker_processes 1;</span><br><span class="line">#2013年11月29日16:57:22</span><br><span class="line"></span><br><span class="line">error_log &#x2F;home&#x2F;wwwlogs&#x2F;nginx_error.log crit;</span><br><span class="line"></span><br><span class="line">pid &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">#Specifies the value for maximum file descriptors that can be opened by this process.</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">  use epoll;</span><br><span class="line">  worker_connections 51200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">  include mime.types;</span><br><span class="line">  default_type application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">  server_names_hash_bucket_size 128;</span><br><span class="line">  client_header_buffer_size 32k;</span><br><span class="line">  large_client_header_buffers 4 32k;</span><br><span class="line">  client_max_body_size 300m;</span><br><span class="line">  #client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line"></span><br><span class="line">  keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">  tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">  fastcgi_connect_timeout 300;</span><br><span class="line">  fastcgi_send_timeout 300;</span><br><span class="line">  fastcgi_read_timeout 300;</span><br><span class="line">  fastcgi_buffer_size 64k;</span><br><span class="line">  fastcgi_buffers 4 64k;</span><br><span class="line">  fastcgi_busy_buffers_size 128k;</span><br><span class="line">  fastcgi_temp_file_write_size 256k;</span><br><span class="line"></span><br><span class="line">  proxy_connect_timeout 5;</span><br><span class="line">  proxy_read_timeout 60;</span><br><span class="line">  proxy_buffer_size 16k;</span><br><span class="line">  proxy_buffers 4 32k;</span><br><span class="line">  proxy_busy_buffers_size 64k;</span><br><span class="line">  proxy_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_min_length 1k;</span><br><span class="line">  gzip_buffers 4 16k;</span><br><span class="line">  gzip_http_version 1.0;</span><br><span class="line">  gzip_comp_level 2;</span><br><span class="line">  gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;</span><br><span class="line">  gzip_vary on;</span><br><span class="line">  gzip_proxied expired no-cache no-store private auth;</span><br><span class="line">  gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">  #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line">  server_tokens off;</span><br><span class="line">  #log format</span><br><span class="line">  log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">  &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class="line"></span><br><span class="line">  upstream tomcat_server &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server</span><br><span class="line">  &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    index index.html index.htm index.php index.jsp default.jsp index.do default.do;</span><br><span class="line">    root &#x2F;home&#x2F;wwwroot;</span><br><span class="line"></span><br><span class="line">    if (-d $request_filename)</span><br><span class="line">    &#123;</span><br><span class="line">      rewrite ^&#x2F;(.*)([^&#x2F;])$ http:&#x2F;&#x2F;$host&#x2F;$1$2&#x2F; permanent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .(jsp|jspx|do)?$</span><br><span class="line">    &#123;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header x-forwarded-for $remote_addr;</span><br><span class="line">      proxy_pass http:&#x2F;&#x2F;tomcat_server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*.(php|php5)?$</span><br><span class="line">    &#123;</span><br><span class="line">      try_files $uri &#x3D;404;</span><br><span class="line">      fastcgi_pass unix:&#x2F;tmp&#x2F;php-cgi.sock;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;status &#123;</span><br><span class="line">      stub_status on;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">      expires 12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;home&#x2F;wwwlogs&#x2F;access.log access;</span><br><span class="line">  &#125;</span><br><span class="line">  include vhost&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查nginx.conf的配置文件语法<br><code>/usr/local/nginx/sbin/nginx -t</code><br>启动nginx<br><code>/usr/local/nginx/sbin/nginx</code></p><p>测试jsp<br>浏览器打开<a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a><br>成功显示tomcat页面</p><p>至此，lnmp配置php与jsp共存成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近更换了一个vps，新的vps当然需要重新配置环境了，之前用的vps死活弄不好php与jsp共存，一直是我心中的痛…&lt;br&gt;换了新的继续试一试能不能弄好，没想到一试真的配置好了，记录一下，以后没准还会用到。&lt;/p&gt;
&lt;p&gt;安装lnmp之类的就不详细赘述了，都是很简单的操作
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
    
      <category term="php" scheme="https://blog.sinalvee.io/tags/php/"/>
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>2013.12.14 I&#39;m back!</title>
    <link href="https://blog.sinalvee.io/2013/12/14/im-back/"/>
    <id>https://blog.sinalvee.io/2013/12/14/im-back/</id>
    <published>2013-12-14T21:27:38.000Z</published>
    <updated>2013-12-14T21:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>时隔七个月，我又回来经营我的小博客了~<br>这次要加油了哦<br>要坚持下去<br>嗯，就这样，加油</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时隔七个月，我又回来经营我的小博客了~&lt;br&gt;这次要加油了哦&lt;br&gt;要坚持下去&lt;br&gt;嗯，就这样，加油&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="闲话" scheme="https://blog.sinalvee.io/categories/%E9%97%B2%E8%AF%9D/"/>
    
    
      <category term="闲话" scheme="https://blog.sinalvee.io/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>win8下无法安装VirtualBox弹出系统找不到指定的路径</title>
    <link href="https://blog.sinalvee.io/2013/05/22/vbox-in-win/"/>
    <id>https://blog.sinalvee.io/2013/05/22/vbox-in-win/</id>
    <published>2013-05-22T13:02:18.000Z</published>
    <updated>2013-05-22T13:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 7/8用户在安装VirtualBox时弹出了<code>Installation failed!Error:系统找不到指定的路径</code>的错误提示，导致VirtualBox安装失败。</p><p>原因：主要是因为驱动的打包程序解压过程出错，应该是无法在中文用户名的系统配置中找到解压路径造成的。<br>解决办法：<br>1、单击开始菜单或者WIN+R，在搜索框输入<code>CMD</code>命令打开命令提示符窗口。<br>2、按住Shift键后右键单击VirtualBox文件选择“复制为路径”命令，接着，在命令提示符窗口右键单击选择“粘贴”命令。<br>3、在命令后添加<code>-extract -path c:vbox</code>，回车即可将安装文件解压到“C:vbox”文件夹了。注：-extract是解压缩的意思。<br>4、找到c:vbox，打开该文件夹发现有三个文件，有32位和64位两种安装程序.msi文件，按照需要安装即可。注：x86为32位系统的，X64位64位系统的，双击即可安装。<br>这样，安装VirtualBox，出现系统找不到指定的路径的故障就可以解决了，就能正确安装VirtualBox了。</p><p>参考文章：<a href="http://www.wzlu.com/article/3/2011/2011062142998.html" target="_blank" rel="noopener">http://www.wzlu.com/article/3/2011/2011062142998.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows 7/8用户在安装VirtualBox时弹出了&lt;code&gt;Installation failed!Error:系统找不到指定的路径&lt;/code&gt;的错误提示，导致VirtualBox安装失败。&lt;/p&gt;
&lt;p&gt;原因：主要是因为驱动的打包程序解压过程出错，应该是无法
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://blog.sinalvee.io/categories/Notes/"/>
    
    
      <category term="virtualbox" scheme="https://blog.sinalvee.io/tags/virtualbox/"/>
    
      <category term="win8" scheme="https://blog.sinalvee.io/tags/win8/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装nasm</title>
    <link href="https://blog.sinalvee.io/2013/05/15/nasm-in-ubuntu/"/>
    <id>https://blog.sinalvee.io/2013/05/15/nasm-in-ubuntu/</id>
    <published>2013-05-15T13:15:48.000Z</published>
    <updated>2013-05-15T13:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、在Ubuntu上安装nasm方法"><a href="#1、在Ubuntu上安装nasm方法" class="headerlink" title="1、在Ubuntu上安装nasm方法"></a>1、在Ubuntu上安装nasm方法</h2><p>首先在网站<a href="http://www.nasm.us/pub/nasm/releasebuilds/2.10.07/下面去下载2.10.07.tar.gz这个版本（一般在ubuntu上面都是使用这个压缩形式的）。" target="_blank" rel="noopener">http://www.nasm.us/pub/nasm/releasebuilds/2.10.07/下面去下载2.10.07.tar.gz这个版本（一般在ubuntu上面都是使用这个压缩形式的）。</a><br>如果要下其他版本的nasm可以通过<a href="http://www.nasm.us/来进行选择进行下载。" target="_blank" rel="noopener">http://www.nasm.us/来进行选择进行下载。</a></p><h2 id="2、安装方法：使用如下的命令："><a href="#2、安装方法：使用如下的命令：" class="headerlink" title="2、安装方法：使用如下的命令："></a>2、安装方法：使用如下的命令：</h2><p>解压：<code>tar zxvf nasm-2.10.07.tar.gz</code><br>进入刚解压的目录<br>然后执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>通过以上的步骤nasm就在ubuntu上安装好了。<br>也可以通过使用命令：<code>nasm -version</code>来查看是否安装成功。<br>如果出现了nasm的版本信息则说明安装成功，否则还需进一步安装。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、在Ubuntu上安装nasm方法&quot;&gt;&lt;a href=&quot;#1、在Ubuntu上安装nasm方法&quot; class=&quot;headerlink&quot; title=&quot;1、在Ubuntu上安装nasm方法&quot;&gt;&lt;/a&gt;1、在Ubuntu上安装nasm方法&lt;/h2&gt;&lt;p&gt;首先在网站&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.sinalvee.io/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="https://blog.sinalvee.io/categories/Linux/Ubuntu/"/>
    
    
      <category term="linux" scheme="https://blog.sinalvee.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://blog.sinalvee.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>wordpress在nginx下只能显示一个主题的解决方法</title>
    <link href="https://blog.sinalvee.io/2013/05/06/wordpress-in-nginx/"/>
    <id>https://blog.sinalvee.io/2013/05/06/wordpress-in-nginx/</id>
    <published>2013-05-06T02:28:50.000Z</published>
    <updated>2013-05-06T02:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="http://zkeyword.com/post/wordpress_nginx_scandir/" target="_blank" rel="noopener">http://zkeyword.com/post/wordpress_nginx_scandir/</a></p><p>最近买了一个vps，装了lnmp一键安装包，架了一个博客站，本来用的挺爽的，某天突然想给那个博客站换一个主题。<br>呀，在后台只显示一个主题其他主题都不知道跑哪去了，不管安装什么主题都只显示一个，安装同一个提示安装的目录有存在，这可真够纳闷的，后来在wordpress论坛上找到了答案：原来是php.ini禁止了scandir函数。</p><p>翻看php手册，<code>scandir()</code> 函数是这样被定义的：<br><code>“scandir() 函数返回一个数组，其中包含指定路径中的文件和目录”</code><br>wordpress可能基于这个函数去开发的，所以就只显示了一个主题。</p><p>由于我装的是lnmp0.9的安装包，其中禁用了部分危险函数：<br><code>“passthru, exec, system, chroot, scandir, chgrp, chown, shell_exec, proc_open, proc_get_status, ini_alter, ini_alter, ini_restore, dl, pfsockopen”</code><br>而<code>scandir</code>函数也在此列，所以这样问题的解决方法只能是将<code>scandir</code>从禁用函数剔除就可以了。</p><p>我们可以通过登录到winscp或是putty来修改/usr/local/php/etc下的php.ini文件，然后重启一下php进程<br><code>/etc/init.d/php-fpm restart</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;http://zkeyword.com/post/wordpress_nginx_scandir/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zkeyword.com/post/wordpress_nginx_
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://blog.sinalvee.io/categories/Notes/"/>
    
    
      <category term="nginx" scheme="https://blog.sinalvee.io/tags/nginx/"/>
    
      <category term="php" scheme="https://blog.sinalvee.io/tags/php/"/>
    
      <category term="wordpress" scheme="https://blog.sinalvee.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>链表的创建、遍历、排序、插入、删除等算法演示</title>
    <link href="https://blog.sinalvee.io/2013/01/29/list-in-c/"/>
    <id>https://blog.sinalvee.io/2013/01/29/list-in-c/</id>
    <published>2013-01-29T15:15:58.000Z</published>
    <updated>2013-01-29T15:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表算法演示</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; //exit()函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;   <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span>    <span class="comment">//指针域</span></span><br><span class="line">&#125;NODE, * PNODE; <span class="comment">//NODE等价于struct Node    PNODE等价于struce Node *</span></span><br><span class="line"></span><br><span class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE pHead)</span></span>;    <span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span>;  <span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE pHead)</span></span>;   <span class="comment">//求链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span>; <span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> * pVal)</span></span>;   <span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span>;    <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNODE pHead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    pHead = creat_list();</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_empty(pHead))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"链表为空n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"链表不空n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表长度为：%dn"</span>, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表排序：n"</span>);</span><br><span class="line">    sort_list(pHead);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入：n"</span>);</span><br><span class="line">    insert_list(pHead, <span class="number">3</span>, <span class="number">55</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除：n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(delete_list(pHead, <span class="number">3</span>, &amp;amp;val))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功，删除的元素为：%dn"</span>, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除失败。"</span>);</span><br><span class="line">    traverse_list(pHead);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;    <span class="comment">//用来存放有效节点的个数</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> val;    <span class="comment">//用来临时存放用户输入的节点的值</span></span><br><span class="line"></span><br><span class="line">    PNODE pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败，程序终止。n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PNODE pTail = pHead;</span><br><span class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入您需要生成的链表节点的个数：len = "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值："</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;amp;val);</span><br><span class="line"></span><br><span class="line">        PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">        <span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败，程序终止。n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pNew-&gt;data = val;</span><br><span class="line">        pTail-&gt;pNext = pNew;</span><br><span class="line">        pTail = pNew;</span><br><span class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNODE p = pHead-&gt;pNext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">NULL</span> != p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNODE p = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t, len;</span><br><span class="line">    len = length_list(pHead);</span><br><span class="line">    PNODE p, q;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, p = pHead-&gt;pNext; i &lt; len<span class="number">-1</span>; i++, p = p-&gt;pNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>, q = p-&gt;pNext; j &lt; len; j++, q = q-&gt;pNext)</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                t = p-&gt;data;</span><br><span class="line">                p-&gt;data = q-&gt;data;</span><br><span class="line">                q-&gt;data = t;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    PNODE p = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">NULL</span> != p &amp;amp;&amp;amp; i &lt; pos<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; pos<span class="number">-1</span> || p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"动态内存分配失败。n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pNew-&gt;data = val;</span><br><span class="line">    PNODE q = p-&gt;pNext;</span><br><span class="line">    p-&gt;pNext = pNew;</span><br><span class="line">    pNew-&gt;pNext = q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> * pVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    PNODE p = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">NULL</span> != p-&gt;pNext &amp;amp;&amp;amp; i &lt; pos<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; pos<span class="number">-1</span> || p-&gt;pNext == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    PNODE q = p-&gt;pNext;</span><br><span class="line">    *pVal = q-&gt;data;</span><br><span class="line">    p-&gt;pNext = p-&gt;pNext-&gt;pNext;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://blog.sinalvee.io/categories/Algorithm/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>跨函数使用内存示例</title>
    <link href="https://blog.sinalvee.io/2013/01/29/using-malloc/"/>
    <id>https://blog.sinalvee.io/2013/01/29/using-malloc/</id>
    <published>2013-01-29T12:14:30.000Z</published>
    <updated>2013-01-29T12:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>跨函数使用内存需用到动态内存分配，即c语言中的malloc和c++中的new。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨函数使用内存示例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Student * <span class="title">CreateStudent</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStudent</span><span class="params">(struct Student *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeStudent</span><span class="params">(struct Student *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> * <span class="title">ps</span>;</span></span><br><span class="line"></span><br><span class="line">    ps = CreateStudent();</span><br><span class="line">    ShowStudent(ps);</span><br><span class="line">    ps-&gt;sid = <span class="number">77</span>;</span><br><span class="line">    ps-&gt;age = <span class="number">66</span>;</span><br><span class="line">    ShowStudent(ps);</span><br><span class="line">    ChangeStudent(ps);</span><br><span class="line">    ShowStudent(ps);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Student * <span class="title">CreateStudent</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> * <span class="title">p</span> = (<span class="title">struct</span> <span class="title">Student</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">Student</span>));</span></span><br><span class="line">    p-&gt;sid = <span class="number">99</span>;</span><br><span class="line">    p-&gt;age = <span class="number">88</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStudent</span><span class="params">(struct Student * pst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %dn"</span>, pst-&gt;sid, pst-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeStudent</span><span class="params">(struct Student * pst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pst-&gt;sid = <span class="number">55</span>;</span><br><span class="line">    pst-&gt;age = <span class="number">44</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跨函数使用内存需用到动态内存分配，即c语言中的malloc和c++中的new。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://blog.sinalvee.io/categories/Algorithm/Data-Structure/"/>
    
    
      <category term="data-structure" scheme="https://blog.sinalvee.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>循环双端队列（转自CSDN，有修改）</title>
    <link href="https://blog.sinalvee.io/2013/01/28/circular-deque/"/>
    <id>https://blog.sinalvee.io/2013/01/28/circular-deque/</id>
    <published>2013-01-28T20:01:17.000Z</published>
    <updated>2013-01-28T20:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>循环队列中，由于入队时尾指针向前追赶头指针，出队时头指针向前追赶尾指针，造成队空和队满时头尾指针均相等。因此，无法通过条件front==rear来判别队列是“空”还是“满”。</p><p>队列的操作特点是“先进先出”。前者主要是“头指针”、“尾指针”的使用，后者主要是理解循环队列提出的原因及其特点。两者都要掌握队列空与满的判定条件以及出队列、入队列操作的实现。</p><p>为充分利用向量空间，克服“假溢出”现象的方法是：将向量空间想象成一个首尾相接的圆环，并称这种向量为循环向量。存储在其中的队列成为循环队列（Circular Queue）。</p><p>我们基于C++实现之。</p><p>实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环双端队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列顺序表示</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">DoubleQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> end1, end2; <span class="comment">//end1和end2为端点</span></span><br><span class="line">T * data;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DoubleQueue(<span class="keyword">int</span> sz = <span class="number">10</span>);</span><br><span class="line">~DoubleQueue()&#123;<span class="keyword">delete</span>[] data;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(T item, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(<span class="keyword">int</span> end)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> end1 == end2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (end1+<span class="number">1</span>)%size == end2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> end)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">DoubleQueue</span> &lt;T&gt;:</span>:DoubleQueue(<span class="keyword">int</span> sz):end1(<span class="number">0</span>), end2(<span class="number">0</span>),size(sz)&#123;</span><br><span class="line">data = <span class="keyword">new</span> T[size];</span><br><span class="line">assert(data != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列插入新元素操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">DoubleQueue</span> &lt;T&gt;:</span>:Enqueue(T item, <span class="keyword">int</span> end)</span><br><span class="line">&#123;</span><br><span class="line">assert(!IsFull());</span><br><span class="line"><span class="keyword">if</span>(end == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">end1 = (end1+<span class="number">1</span>)%size;</span><br><span class="line">data[end1] = item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">data[end2] = item;</span><br><span class="line">end2 = (end2<span class="number">-1</span>+size)%size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列删除操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">DoubleQueue</span> &lt;T&gt;:</span>:Dequeue(<span class="keyword">int</span> end)</span><br><span class="line">&#123;</span><br><span class="line">assert(!IsEmpty());</span><br><span class="line"><span class="keyword">if</span>(end == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">end1 = (end1+size<span class="number">-1</span>)%size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">end2 = (end2+<span class="number">1</span>)%size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列输出操作</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">DoubleQueue</span> &lt;T&gt;:</span>:<span class="built_in">list</span>(<span class="keyword">int</span> end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(end == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(T p=(end2+<span class="number">1</span>)%size; p&lt;=end1; p=(p+<span class="number">1</span>)%size)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;data[p];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(T p=end1; p!=end2; p=(p+size<span class="number">-1</span>)%size)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;data[p];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环双端队列的测试</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DoubleQueue &lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"运行结果："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//向队列end1插入4,5,6,7,8五个元素</span></span><br><span class="line">Q.Enqueue(<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line">Q.Enqueue(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">Q.Enqueue(<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">Q.Enqueue(<span class="number">7</span>,<span class="number">1</span>);</span><br><span class="line">Q.Enqueue(<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输出向队列end1插入4,5,6,7,8五个元素后的情况："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Q.<span class="built_in">list</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//删除最后插入的两个元素</span></span><br><span class="line">Q.Dequeue(<span class="number">1</span>);</span><br><span class="line">Q.Dequeue(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输出删除最后两个元素后的队列end1的情况："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Q.<span class="built_in">list</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//向队列end2插入7,8,9,10,11五个元素</span></span><br><span class="line">Q.Enqueue(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">Q.Enqueue(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">Q.Enqueue(<span class="number">9</span>,<span class="number">2</span>);</span><br><span class="line">Q.Enqueue(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">Q.Enqueue(<span class="number">11</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输出向队列end2插入7,8,9,10,11五个元素后的情况："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Q.<span class="built_in">list</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;循环队列中，由于入队时尾指针向前追赶头指针，出队时头指针向前追赶尾指针，造成队空和队满时头尾指针均相等。因此，无法通过条件front==rear来判别队列是“空”还是“满”。&lt;/p&gt;
&lt;p&gt;队列的操作特点是“先进先出”。前者主要是“头指针”、“尾指针”的使用，后者主要是理解
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="Data Structure" scheme="https://blog.sinalvee.io/categories/Algorithm/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>个人博客开通~</title>
    <link href="https://blog.sinalvee.io/2013/01/16/hello-wordpress/"/>
    <id>https://blog.sinalvee.io/2013/01/16/hello-wordpress/</id>
    <published>2013-01-16T16:49:05.000Z</published>
    <updated>2013-01-16T16:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>反正自己的VPS闲着也是闲着，还不如开一个小博客任凭自己瞎写，哈哈</p><p>看看我能坚持多久吧~</p><p>今天鼓捣了一下午的windows vps（昨天花30/月买的），各种不会玩，看来我还是适合Linux啊，嘿嘿，还是继续用我大Linux吧</p><p>用Linux不但更适应些，还能涨知识呢</p><p>可惜jsp环境怎么也搭建不好，只能先玩玩php了，虽然php语言我也是一窍不通…</p><p>嗯，先写这些吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;反正自己的VPS闲着也是闲着，还不如开一个小博客任凭自己瞎写，哈哈&lt;/p&gt;
&lt;p&gt;看看我能坚持多久吧~&lt;/p&gt;
&lt;p&gt;今天鼓捣了一下午的windows vps（昨天花30/月买的），各种不会玩，看来我还是适合Linux啊，嘿嘿，还是继续用我大Linux吧&lt;/p&gt;
&lt;p&gt;用L
      
    
    </summary>
    
    
      <category term="闲话" scheme="https://blog.sinalvee.io/categories/%E9%97%B2%E8%AF%9D/"/>
    
    
      <category term="闲话" scheme="https://blog.sinalvee.io/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>scanf，printf输入输出float和double型数据</title>
    <link href="https://blog.sinalvee.io/2012/10/29/float-double-in-scanf-and-printf/"/>
    <id>https://blog.sinalvee.io/2012/10/29/float-double-in-scanf-and-printf/</id>
    <published>2012-10-29T22:15:00.000Z</published>
    <updated>2012-10-29T22:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.printf的%f说明符既可以输出float型又可以输出double型。</strong></p><p>根据“默认参数提升”规则（在printf这样的函数的可变参数列表中，不论作用域内有没有原型，都适用这一规则）float型会被提升为double型。因此printf()只会看到双精度数。</p><p><strong>2.scanf对于float类型必须用%f，double必须用%lf。</strong></p><p>对于scanf，情况就完全不同了，它接受指针，这里没有类似的类型提升。（通过指针）向float存储和向double存储大不一样，因此，scanf区别%f和%lf。</p><p><strong>3.事实上，printf中没有定义%lf，但是很多系统可能会接受它。要确保可移植性，就要坚持使用%f。</strong></p><p>要想保留小数位数，请使用：<br><code>printf(&quot;%.8f&quot;, a);</code>保留8位小数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.printf的%f说明符既可以输出float型又可以输出double型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据“默认参数提升”规则（在printf这样的函数的可变参数列表中，不论作用域内有没有原型，都适用这一规则）float型会被提升为double型。因
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://blog.sinalvee.io/categories/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>hdoj-1004 Let the Balloon Rise</title>
    <link href="https://blog.sinalvee.io/2012/10/04/hdoj-1004/"/>
    <id>https://blog.sinalvee.io/2012/10/04/hdoj-1004/</id>
    <published>2012-10-04T00:08:00.000Z</published>
    <updated>2012-10-04T00:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道什么原因，C提交返回编译错误，GCC提交就没问题……</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1004 Let the Balloon Rise</span></span><br><span class="line"><span class="comment">// 0MS 216K 983 B GCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000+10</span></span><br><span class="line"><span class="keyword">char</span> a[MAXN][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> b[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j, m = <span class="number">0</span>, ok, <span class="built_in">max</span>, maxx;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, temp);</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            ok = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(a[j], temp) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    b[j]++;</span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ok == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">strcpy</span>(a[m], temp);</span><br><span class="line">                    b[m]++;</span><br><span class="line">                    m++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">max</span> = b[<span class="number">0</span>];</span><br><span class="line">        maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="keyword">if</span>(b[i] &gt; <span class="built_in">max</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">max</span> = b[i];</span><br><span class="line">                maxx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%sn"</span>, a[maxx]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知道什么原因，C提交返回编译错误，GCC提交就没问题……&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典》 第五章 基础题目选解</title>
    <link href="https://blog.sinalvee.io/2012/09/29/classic-chapter5/"/>
    <id>https://blog.sinalvee.io/2012/09/29/classic-chapter5/</id>
    <published>2012-09-29T17:29:00.000Z</published>
    <updated>2012-09-29T17:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-1-字符串"><a href="#5-1-字符串" class="headerlink" title="5.1 字符串"></a>5.1 字符串</h2><h3 id="5-1-1-WERTYU"><a href="#5-1-1-WERTYU" class="headerlink" title="5.1.1 WERTYU"></a>5.1.1 WERTYU</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.1.1 WERTYU</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> *s = <span class="string">"1234567890-=QWERTYUIOP[]\ASDFGHJKL;'ZXCVBNM,./"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, c;</span><br><span class="line"><span class="keyword">while</span>((c = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; s[i] &amp;&amp; s[i] != c; i++)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">if</span>(s[i])</span><br><span class="line"><span class="built_in">putchar</span>(s[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-TeX括号"><a href="#5-1-2-TeX括号" class="headerlink" title="5.1.2 TeX括号"></a>5.1.2 TeX括号</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.1.2 TeX括号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, q = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((c = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'"'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, q ? <span class="string">""</span> : <span class="string">"''"</span>);</span><br><span class="line">q = !q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-周期串"><a href="#5-1-3-周期串" class="headerlink" title="5.1.3 周期串"></a>5.1.3 周期串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.1.3 周期串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> <span class="keyword">word</span>[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, <span class="keyword">word</span>);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(<span class="keyword">word</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line"><span class="keyword">if</span>(len % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">word</span>[j] != <span class="keyword">word</span>[j%i])</span><br><span class="line">&#123;</span><br><span class="line">ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-高精度运算"><a href="#5-2-高精度运算" class="headerlink" title="5.2 高精度运算"></a>5.2 高精度运算</h2><h3 id="5-2-1-小学生算术"><a href="#5-2-1-小学生算术" class="headerlink" title="5.2.1 小学生算术"></a>5.2.1 小学生算术</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.2.1 小学生算术</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a &amp;&amp; !b)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">c = (a%<span class="number">10</span> + b%<span class="number">10</span>) &gt; <span class="number">9</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">ans += c;</span><br><span class="line">a /= <span class="number">10</span>;</span><br><span class="line">b /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-阶乘的精确值"><a href="#5-2-2-阶乘的精确值" class="headerlink" title="5.2.2 阶乘的精确值"></a>5.2.2 阶乘的精确值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.2.2 阶乘的精确值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 3000</span></span><br><span class="line"><span class="keyword">int</span> f[MAXN];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  const int maxn = 3000;</span></span><br><span class="line"><span class="comment">  int f[maxn];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  这样写会报错</span></span><br><span class="line"><span class="comment">  .c|6|error: variably modified 'f' at file scope|</span></span><br><span class="line"><span class="comment">  因为const在C中定义的时可读变量，maxn依旧是变量，不能用变量声明数组长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;<span class="comment">//乘以i</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; MAXN; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = f[j] * i + c;</span><br><span class="line">f[j] = s % <span class="number">10</span>;</span><br><span class="line">c = s/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = MAXN<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span>(f[j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(i = j; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, f[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;5-1-字符串&quot;&gt;&lt;a href=&quot;#5-1-字符串&quot; class=&quot;headerlink&quot; title=&quot;5.1 字符串&quot;&gt;&lt;/a&gt;5.1 字符串&lt;/h2&gt;&lt;h3 id=&quot;5-1-1-WERTYU&quot;&gt;&lt;a href=&quot;#5-1-1-WERTYU&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
    
      <category term="算法竞赛入门经典" scheme="https://blog.sinalvee.io/tags/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>hdoj题目分类</title>
    <link href="https://blog.sinalvee.io/2012/08/25/hdoj-classification/"/>
    <id>https://blog.sinalvee.io/2012/08/25/hdoj-classification/</id>
    <published>2012-08-25T15:28:00.000Z</published>
    <updated>2012-08-25T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础题："><a href="#基础题：" class="headerlink" title="基础题："></a>基础题：</h2><p>1000、1001、1004、1005、1008、1012、1013、1014、1017、1019、1021、1028、1029、1032、1037、1040、1048、1056、1058、1061、1070、1076、1089、1090、1091、1092、1093、1094、1095、1096、1097、1098、1106、1108、1157、1163、1164、1170、1194、1196、1197、1201、1202、1205、1219、1234、1235、1236、1248、1266、1279、1282、1283、1302、1303、1323、1326、1330、1334、1335、1339、1390、1391、1393、1395、1397、1405、1406、1407、1408、1412、1418、1420、1465、1491、1555、1562、1563、1570、1587、1673、1678、1708、1718、1720、1785、1799、1859、1862、1877、1898、1976、1977、1985、1994、2000、2001、2002、2003、2004、2005、2006、2007、2008、2009、2010、2011、2012、2013、2014、2015、2016、2017、2018、2019、2020、2021、2022、2023、2024、2025、2026、2027、2028、2029、2030、2031、2032、2033、2034、2035、2039、2040、2042、2043、2048、2049、2051、2053、2055、2056、2057、2060、2061、2071、2073、2075、2076、2078、2081、2083、2088、2090、2092、2093、2095、2096、2097、2098、2099、2101、2103、2106、2107、2109、2113、2114、2115、2123、2131、2132、2133、2135、2136、2137、2138、2139、2143、2148、2153、2156、2161、2162、2164、2178、2186、2192、2200、2201、2212、2304、2309、2317、2401、2500、2502、2503、2504、2519、2520、2521、2523、2524、2535、2537、2539、2547、2548、2549、2550、2551、2552、2555、2560、2561、2562、2566、2567、2568、2700、2710、</p><h2 id="DP："><a href="#DP：" class="headerlink" title="DP："></a>DP：</h2><p>1003、10240、1029、1069、1074、1087、1114、1159、1160、1171、1176、1203、1231、1257、1260、1284、1421、1789、1978、2059、2084、2159、2191、2544、2571、2602、2709、</p><h2 id="搜索："><a href="#搜索：" class="headerlink" title="搜索："></a>搜索：</h2><p>1010、1015、1016、1026、1072、1075、1175、1180、1181、1238、1239、1240、1241、1242、1253、1254、1312、1372、1548、1597、1671、1677、1728、1800、1983、2102、2141、2553、2563、2605、2612、2614、1616、2717</p><h2 id="贪心："><a href="#贪心：" class="headerlink" title="贪心："></a>贪心：</h2><p>1009、1045、1049、1050、1051、1052、1257、1800、2037、2111、2124、2187、2391、2570</p><h2 id="数学题："><a href="#数学题：" class="headerlink" title="数学题："></a>数学题：</h2><p>1018、1065、1071、1115、1141、1162、1212、1220、1492、1593、1701、1722、1798、1840、1999、2036、2080、2086、2089、2105、2108、2134、2303、2393、2438、2529、2547、2548、2552、2554、2601、2603、2701、</p><h2 id="递推："><a href="#递推：" class="headerlink" title="递推："></a>递推：</h2><p>1133、1143、1207、1249、1267、1284、1290、1297、1396、1992、1995、1996、2013、2014、2044、2045、2046、2047、2050、2064、2065、2067、2068、2070、2077、2085、2151、2154、2160、2190、2501、2512、2563、2569、2709、2716、</p><h2 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h2><p>1020、1039、1043、1062、1073、1075、1088、1113、1161、1200、1251、1256、1288、1321、1328、1379、1804、1860、1982、1984、2017、2024、2025、2026、2027、2043、2052、2054、2072、2074、2087、2131、2137、2140、2163、2203、2206、2352、2500、2549、2564、2565、2567、2572、2609、2607、2707、2708、2719、2721、2723、</p><h2 id="大数："><a href="#大数：" class="headerlink" title="大数："></a>大数：</h2><p>1002、1042、1133、1250、1297、1715、1753、1865、2100、</p><h2 id="胡搞："><a href="#胡搞：" class="headerlink" title="胡搞："></a>胡搞：</h2><p>1022、1027、1030、1035、1128、1165、1209、1210、1215、1222、1228、1229、1230、1237、1259、1276、1286、1337、1342、1361、1370、1506、1577、1597、1702、1716、1727、1868、1870、1896、1981、1986、1987、1988、1997、1998、1999、2058、2062、2089、2090、2094、2104、2116、2117、2135、2175、2183、2184、2197、2303、2368、2370、2374、2511、2522、2527、2600、2615、2703、2711、2714、2715、2725、</p><h2 id="博弈："><a href="#博弈：" class="headerlink" title="博弈："></a>博弈：</h2><p>1077、1404、1517、1524、1525、1527、1536、1564、1729、1730、1846、1847、1848、1849、1850、2147、2149、2176、2177、2188</p><h2 id="母函数："><a href="#母函数：" class="headerlink" title="母函数："></a>母函数：</h2><p>1085、1171、1398、2079、2082、2110、2152、2189、2566、</p><h2 id="hash："><a href="#hash：" class="headerlink" title="hash："></a>hash：</h2><p>1264、1280、1425、1496、1800、2522、2600</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础题：&quot;&gt;&lt;a href=&quot;#基础题：&quot; class=&quot;headerlink&quot; title=&quot;基础题：&quot;&gt;&lt;/a&gt;基础题：&lt;/h2&gt;&lt;p&gt;1000、1001、1004、1005、1008、1012、1013、1014、1017、1019、1021、1028、10
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
      <category term="acm" scheme="https://blog.sinalvee.io/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典》——重新实现库函数</title>
    <link href="https://blog.sinalvee.io/2012/08/24/re-implement-library-functions/"/>
    <id>https://blog.sinalvee.io/2012/08/24/re-implement-library-functions/</id>
    <published>2012-08-24T10:55:00.000Z</published>
    <updated>2012-08-24T10:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习字符串时，重新实现一些库函数的功能是很有益的。</p><h2 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h2><p>只用getchar函数读入一个整数。假设它占据单独的一行，读到行末为止，包括换行符。输入保证读入的整数可以保存在int中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.4.4-1 只用getchar函数读入一个整数。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>], i = <span class="number">0</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((a[i] = getchar()) &amp;&amp; a[i] != <span class="string">'n'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num = num*<span class="number">10</span> + a[i] - <span class="string">'0'</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%dn"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h2><p>只用fgets函数读入一个整数。假设它占据单独的一行，读到行末为止，包括换行符。输入保证读入的整数可以保存在int中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.4.4-2 只用fgets函数读入一个整数。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s)<span class="number">-1</span>; i++)</span><br><span class="line">num = num*<span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h2><p>只用getchar实现fgets的功能，即用每次一个字符的方式读取整行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.4.4-3 只用getchar实现fgets的功能。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((s[i] = getchar()) &amp;&amp; s[i] != <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">s[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%sn"</span>, s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习4：实现strchr的功能，即在一个字符串中查找一个字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.4.4-4 实现strchr的功能，即在一个字符串中查找一个字符。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * s, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fun</span><span class="params">(<span class="keyword">char</span> * s, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*s &amp;&amp; *s != c)</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">if</span>(*s == c)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习字符串时，重新实现一些库函数的功能是很有益的。&lt;/p&gt;
&lt;h2 id=&quot;练习1：&quot;&gt;&lt;a href=&quot;#练习1：&quot; class=&quot;headerlink&quot; title=&quot;练习1：&quot;&gt;&lt;/a&gt;练习1：&lt;/h2&gt;&lt;p&gt;只用getchar函数读入一个整数。假设它占据单独的一行
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
    
      <category term="算法竞赛入门经典" scheme="https://blog.sinalvee.io/tags/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典》习题——Chapter 2</title>
    <link href="https://blog.sinalvee.io/2012/08/21/classic-chapter-2/"/>
    <id>https://blog.sinalvee.io/2012/08/21/classic-chapter-2/</id>
    <published>2012-08-21T16:28:00.000Z</published>
    <updated>2012-08-21T16:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="习题2-1-位数（digit）"><a href="#习题2-1-位数（digit）" class="headerlink" title="习题2-1 位数（digit）"></a>习题2-1 位数（digit）</h2><p>题目：输入一个不超过10^9的正整数，输出它的位数。例如12735的位数是5。请不要使用任何数学函数，只用四则运算和循环语句实现。<br>分析：考察循环的使用。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-1 位数（digit）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, digit = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">digit++;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, digit);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-2-水仙花数-daffodil"><a href="#习题2-2-水仙花数-daffodil" class="headerlink" title="习题2-2 水仙花数(daffodil)"></a>习题2-2 水仙花数(daffodil)</h2><p>题目：输出100 ~ 999中的所有水仙花数，若3位数ABC满足ABC = A^3 + B^3 + C^3(<em>书中题目有误，均写成了平方</em>)，则称其为水仙花数。例如153 = 1^3 + 5^3 + 3^3，所以153是水仙花数。<br>分析：循环。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-2 水仙花数（daffodil）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, c;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a = i/<span class="number">100</span>;</span><br><span class="line">b = i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">c = i%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i == a*a*a + b*b*b + c*c*c)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is a daffodil number.n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-3-韩信点兵-hanxin"><a href="#习题2-3-韩信点兵-hanxin" class="headerlink" title="习题2-3 韩信点兵(hanxin)"></a>习题2-3 韩信点兵(hanxin)</h2><p>题目：韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排、五人一排、七人一排地变换队形，而他每次都只是掠一眼队伍的排位就知道人数了。输入3个非负整数a，b，c，表示每种队形排尾的人数（a&lt;3，b&lt;5，c&lt;7），输出总人数的最小值（或报告无解）。已知总人数不小于10，不超过100。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例输入： 2 1 6</span><br><span class="line">样例输出： 41</span><br><span class="line">样例输入： 2 1 4</span><br><span class="line">样例输出： No Answer</span><br></pre></td></tr></table></figure><p>分析：利用循环分别对3、5、7取余后与a,b,c比较，若全相等则输出。若没有则报告无解。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-3 韩信点兵（hanxin）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">10</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span> == a &amp;&amp; i%<span class="number">5</span> ==b &amp;&amp; i%<span class="number">7</span> ==c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">101</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No answer"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-4-倒三角形-triangle"><a href="#习题2-4-倒三角形-triangle" class="headerlink" title="习题2-4 倒三角形(triangle)"></a>习题2-4 倒三角形(triangle)</h2><p>题目：输入正整数n&lt;=20，输出一个n层的倒三角形。例如n=5时输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#########</span><br><span class="line"> #######</span><br><span class="line">  #####</span><br><span class="line">   ###</span><br><span class="line">    #</span><br></pre></td></tr></table></figure><p>分析：依旧是循环的用法，注意空格和#之间的关系。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-4 倒三角形（triangle）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">2</span>*n<span class="number">-2</span>*i<span class="number">-1</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-5-统计-stat"><a href="#习题2-5-统计-stat" class="headerlink" title="习题2-5 统计(stat)"></a>习题2-5 统计(stat)</h2><p>题目：输入一个正整数n，然后读取n个正整数a1, a2, a3…,an，最后再读取一个正整数m。统计数列中多少个正整数的值小于m。<br>分析：对freopen和fopen的使用。</p><p>源码略。</p><h2 id="习题2-6-调和级数（harmony）"><a href="#习题2-6-调和级数（harmony）" class="headerlink" title="习题2-6 调和级数（harmony）"></a>习题2-6 调和级数（harmony）</h2><p>题目：输入正整数n，输出H(n) = 1 + 1/2 + 1/3 + …… + 1/n的值，保留3位小数。例如n=3时答案为1.833.<br>分析：简单的循环累加，注意输出格式。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-6 调和级数（harmory）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">sum += <span class="number">1.0</span>/i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lfn"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-7-近似计算（approximation）"><a href="#习题2-7-近似计算（approximation）" class="headerlink" title="习题2-7 近似计算（approximation）"></a>习题2-7 近似计算（approximation）</h2><p>题目：计算派/4 = 1 - 1/3 + 1/5 - 1/7 +……，直到最后一项小于10^-6.<br>分析：循环。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-7 近似计算（opproximation）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">double</span> t = <span class="number">1</span>, pi = <span class="number">0</span>, x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; t &gt;= <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">-6</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">t = <span class="number">1.0</span>/(<span class="number">2</span>*i<span class="number">-1</span>);</span><br><span class="line">pi += t*x;</span><br><span class="line">x *= <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lfn"</span>, <span class="number">4</span>*pi);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-8-子序列的和（subsequence）"><a href="#习题2-8-子序列的和（subsequence）" class="headerlink" title="习题2-8 子序列的和（subsequence）"></a>习题2-8 子序列的和（subsequence）</h2><p>题目：输入两个正整数n&lt;m&lt;10^6，输出1/n^2 + 1/(n+1)^2 + …… + 1/m^2，保留5位小数。例如n=2,m=4时答案是0.42361;n=65536,m=655360时答案为0.00001。注意：本题有陷阱。<br>分析：还是for循环累加。本题陷阱在于n比较大时，n<em>n会溢出，所以 1/n^2 应该用 1/n/n 而不是 1/(n</em>n)。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-8 子序列的和（subsequence）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m, i;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(i = n; i &lt;= m; i++)</span><br><span class="line">sum += <span class="number">1.0</span>/i/i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5lfn"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  本题陷阱在于1/(n)^2 + ...</span></span><br><span class="line"><span class="comment">  用1/(n*n)会溢出</span></span><br><span class="line"><span class="comment">  改为1/n/n就好</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="习题2-9-分数化小数（decimal）"><a href="#习题2-9-分数化小数（decimal）" class="headerlink" title="习题2-9 分数化小数（decimal）"></a>习题2-9 分数化小数（decimal）</h2><p>题目：输入正整数a,b,c，输出a/b的小数形式，精确到小数点后c位。a,b &lt;= 10^6，c &lt;= 100。例如a=1,b=6,c=4时应输出0.1667.<br>分析：考察格式化输出，printf(“%<em>.</em>lf”, x, y, z); 中两个*可用后边的变量表示。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-9 分数化小数（decimal）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">x = <span class="number">1.0</span>*a/b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.*lfn"</span>, c, x);    </span><br><span class="line"><span class="comment">//printf("%*.*lf", x, y, z) 第一个*对应x，第二个*对应y，lf对应z</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-10-排列（permutition）"><a href="#习题2-10-排列（permutition）" class="headerlink" title="习题2-10 排列（permutition）"></a>习题2-10 排列（permutition）</h2><p>题目：用1，2，3……9组成3个三位数abc,def和ghi，每个数字恰好使用一次，要求abc:def:ghi = 1:2:3。输出所有解。提示：不必太动脑筋。<br>分析：上学期院里组织比赛的一道题，利用数组，a[1]~a[9]赋值为0，令a[出现的数字] = 1，若a[1] + a[2] + …… +a[9] == 9，则全部数字都出现。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题2-10 排列（permutation）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z, a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">100</span>; x &lt; <span class="number">333</span>; x++)</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="number">2</span>*x;</span><br><span class="line">z = <span class="number">3</span>*x;</span><br><span class="line"><span class="comment">//令a[出现的数字] = 1</span></span><br><span class="line">a[x/<span class="number">100</span>] = a[x/<span class="number">10</span>%<span class="number">10</span>] = a[x%<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">a[y/<span class="number">100</span>] = a[y/<span class="number">10</span>%<span class="number">10</span>] = a[y%<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">a[z/<span class="number">100</span>] = a[z/<span class="number">10</span>%<span class="number">10</span>] = a[z%<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i, s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">s += a[i];</span><br><span class="line"><span class="keyword">if</span>(s == <span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dt%dt%dn"</span>, x, y, z);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)<span class="comment">//重新赋值为0</span></span><br><span class="line">a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;习题2-1-位数（digit）&quot;&gt;&lt;a href=&quot;#习题2-1-位数（digit）&quot; class=&quot;headerlink&quot; title=&quot;习题2-1 位数（digit）&quot;&gt;&lt;/a&gt;习题2-1 位数（digit）&lt;/h2&gt;&lt;p&gt;题目：输入一个不超过10^9的正整数
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
    
      <category term="算法竞赛入门经典" scheme="https://blog.sinalvee.io/tags/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2036 改（和谐）革春风吹满地</title>
    <link href="https://blog.sinalvee.io/2012/08/15/hdoj-2036/"/>
    <id>https://blog.sinalvee.io/2012/08/15/hdoj-2036/</id>
    <published>2012-08-15T20:56:00.000Z</published>
    <updated>2012-08-15T20:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2036 改（和谐）革春风吹满地</span></span><br><span class="line"><span class="comment">// 0MS236K393 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line">__int64 x[<span class="number">101</span>], y[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">x[n] = x[<span class="number">0</span>];</span><br><span class="line">y[n] = y[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">area += <span class="number">0.5</span> * (x[i] - x[i+<span class="number">1</span>]) * (y[i] + y[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(area &lt; <span class="number">0</span>)</span><br><span class="line">area *= <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lfn"</span>, area);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2095 find your present (2)</title>
    <link href="https://blog.sinalvee.io/2012/08/15/hdoj-2095/"/>
    <id>https://blog.sinalvee.io/2012/08/15/hdoj-2095/</id>
    <published>2012-08-15T20:40:00.000Z</published>
    <updated>2012-08-15T20:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2095 find your present (2)</span></span><br><span class="line"><span class="comment">// 562MS220K230 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, x, s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">s ^= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>while(scanf(&quot;%d&quot;, &amp;n), n)</code>用到了逗号表达式</p><p><code>s ^= x;</code>用到了异或运算</p><p>百度百科：<a href="http://baike.baidu.com/view/674171.htm" target="_blank" rel="noopener">异或</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1^1 &#x3D; 0</span><br><span class="line">1^0 &#x3D; 1</span><br><span class="line">0^1 &#x3D; 1</span><br><span class="line">0^0 &#x3D; 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2097 Sky数</title>
    <link href="https://blog.sinalvee.io/2012/08/15/hdoj-2097/"/>
    <id>https://blog.sinalvee.io/2012/08/15/hdoj-2097/</id>
    <published>2012-08-15T15:37:00.000Z</published>
    <updated>2012-08-15T15:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2097 Sky数</span></span><br><span class="line"><span class="comment">// 0MS220K477 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, sum10, sum16, sum12;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">sum10 = fun(n, <span class="number">10</span>);</span><br><span class="line">sum16 = fun(n, <span class="number">16</span>);</span><br><span class="line">sum12 = fun(n, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">if</span>(sum10 == sum16 &amp;&amp; sum10 == sum12)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is a Sky Number.n"</span>, n);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is not a Sky Number.n"</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += m%x;</span><br><span class="line">        m /= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2092 整数解</title>
    <link href="https://blog.sinalvee.io/2012/08/15/hdoj-2092/"/>
    <id>https://blog.sinalvee.io/2012/08/15/hdoj-2092/</id>
    <published>2012-08-15T15:05:00.000Z</published>
    <updated>2012-08-15T15:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2092 整数解</span></span><br><span class="line"><span class="comment">// 234MS220K279 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, i, c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) &amp;&amp; n || m)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">-9999</span>; i &lt; <span class="number">10000</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*(n-i) == m)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yesn"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Non"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2072 单词数</title>
    <link href="https://blog.sinalvee.io/2012/08/11/hdoj-2072/"/>
    <id>https://blog.sinalvee.io/2012/08/11/hdoj-2072/</id>
    <published>2012-08-11T14:45:00.000Z</published>
    <updated>2012-08-11T14:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2072 单词数</span></span><br><span class="line"><span class="comment">// 0MS236K695 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="keyword">word</span>[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">100</span>][<span class="number">100</span>]; <span class="comment">//arr用于存储以前出现过的单词</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len, pos, count;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(gets(<span class="keyword">word</span>) &amp;&amp; <span class="built_in">strcmp</span>(<span class="keyword">word</span>, <span class="string">"#"</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="built_in">strlen</span>(<span class="keyword">word</span>);</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// pos加单词长度一直到&gt;=len</span></span><br><span class="line"><span class="keyword">while</span>(pos &lt; len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(<span class="keyword">word</span> + pos, <span class="string">"%s"</span>, temp); <span class="comment">//把一个单词存入temp,空格忽略</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(arr[i], temp) == <span class="number">0</span>)<span class="comment">//如果和以前存入的单词相同，则不计数</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i == count)</span><br><span class="line"><span class="built_in">strcpy</span>(arr[count++], temp); <span class="comment">//把temp存入arr,并计数器cnt加一</span></span><br><span class="line"><span class="comment">/*用pos来记录下次读取的位置*/</span></span><br><span class="line"><span class="keyword">for</span>(i = pos; <span class="keyword">word</span>[i] == <span class="string">' '</span>; i++)<span class="comment">//空格</span></span><br><span class="line">pos++;</span><br><span class="line">pos += <span class="built_in">strlen</span>(temp) + <span class="number">1</span>;<span class="comment">//单词</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否全为空格</span></span><br><span class="line"><span class="keyword">int</span> k, m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; len; k ++)</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">word</span>[k] == <span class="string">' '</span>)</span><br><span class="line">        m ++;</span><br><span class="line">      <span class="keyword">if</span>(m == len)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0n"</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%dn"</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典》习题——Chapter</title>
    <link href="https://blog.sinalvee.io/2012/08/10/classic-chapter-1/"/>
    <id>https://blog.sinalvee.io/2012/08/10/classic-chapter-1/</id>
    <published>2012-08-10T19:12:01.000Z</published>
    <updated>2012-08-10T19:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="习题1-1-平均数（average）"><a href="#习题1-1-平均数（average）" class="headerlink" title="习题1-1 平均数（average）"></a>习题1-1 平均数（average）</h2><p>题目：输入3个整数，输出他们的平均值，保留3位小数。</p><p>分析：主要考察的是C语言打印函数(printf)的输出格式。</p><p>C中格式字符串的一般形式为： %[标志][输出最小宽度][.精度][长度]类型， 其中方括号[]中的项为可选项。各项的意义介绍如下：</p><table><thead><tr><th align="center">格式字符</th><th>格式字符意义</th></tr></thead><tbody><tr><td align="center">a</td><td>浮点数、十六进制数字和p-计数法(C99)</td></tr><tr><td align="center">A</td><td>浮点数、十六进制数字和p-计数法(C99)</td></tr><tr><td align="center">c</td><td>输出单个字符</td></tr><tr><td align="center">d</td><td>以十进制形式输出带符号整数(正数不输出符号)</td></tr><tr><td align="center">e</td><td>以指数形式输出单、双精度实数</td></tr><tr><td align="center">E</td><td>以指数形式输出单、双精度实数</td></tr><tr><td align="center">f</td><td>小数形式输出单、双精度实数</td></tr><tr><td align="center">g</td><td>以%f%e中较短的输出宽度输出单、双精度实数,%e格式在指数小于-4或者大于等于精度时使用</td></tr><tr><td align="center">G</td><td>以%f%e中较短的输出宽度输出单、双精度实数,%e格式在指数小于-4或者大于等于精度时使用</td></tr><tr><td align="center">i</td><td>有符号十进制整数(与%d相同)</td></tr><tr><td align="center">o</td><td>以八进制形式输出无符号整数(不输出前缀O)</td></tr><tr><td align="center">p</td><td>指针</td></tr><tr><td align="center">s</td><td>输出字符串</td></tr><tr><td align="center">x</td><td>以十六进制形式输出无符号整数(不输出前缀OX)</td></tr><tr><td align="center">X</td><td>以十六进制形式输出无符号整数(不输出前缀OX)</td></tr><tr><td align="center">u</td><td>以十进制形式输出无符号整数</td></tr></tbody></table><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-1 平均数（average）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="keyword">double</span> aver;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">aver = (a+b+c) / <span class="number">3.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lfn"</span>, aver);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-2-温度（temperature）"><a href="#习题1-2-温度（temperature）" class="headerlink" title="习题1-2 温度（temperature）"></a>习题1-2 温度（temperature）</h2><p>题目：输入华氏温度f，输出对应的摄氏温度c，保留3位小数。提示：<code>c = 5(f-32)/9</code>。<br>分析：同上题，主要考察的是C语言打印函数(printf)的输出格式。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-2 温度（temperature）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> f, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;f);</span><br><span class="line">c = <span class="number">5</span>*(f<span class="number">-32</span>)/<span class="number">9</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3fn"</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-3-连续和（sum）"><a href="#习题1-3-连续和（sum）" class="headerlink" title="习题1-3 连续和（sum）"></a>习题1-3 连续和（sum）</h2><p>题目：输入正整数n，输出1+2+3+……+n的值。提示：目标是解决问题，而不是练习编程。<br>分析：1+2+3=……+n = (1+n)*n/2  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-3 连续和（sum）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">sum = (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-4-正弦和余弦（sincos）"><a href="#习题1-4-正弦和余弦（sincos）" class="headerlink" title="习题1-4 正弦和余弦（sincos）"></a>习题1-4 正弦和余弦（sincos）</h2><p>题目：输入正整数n（n&lt;360），输出n度的正弦、余弦函数值。提示：使用数学函数。<br>分析；考察的是数学函数的使用，注意角度和弧度的换算关系：180度 = pi * 1弧度。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-4 正弦和余弦（sin&amp;cos）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">x = n*(PI/<span class="number">180.0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lfn"</span>, <span class="built_in">sin</span>(x));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lfn"</span>, <span class="built_in">cos</span>(x));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-5-距离（distance）"><a href="#习题1-5-距离（distance）" class="headerlink" title="习题1-5 距离（distance）"></a>习题1-5 距离（distance）</h2><p>题目：输入4个浮点数x1, y1, x2, y2，输出平面坐标系点(x1, y1)到点(x2, y2)的距离。<br>分析：<br>1、平面直角坐标系中，两点间的距离公式为：根号下（|X1-X2|的平方+|Y1-Y2|的平方）。<br>2、平方函数sqrt属于math.h文件中。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-5 距离（distance）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x1, x2, y1, y2, dis;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f%f%f%f"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">dis = <span class="built_in">sqrt</span>((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%fn"</span>, dis);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-6-偶数（odd）"><a href="#习题1-6-偶数（odd）" class="headerlink" title="习题1-6 偶数（odd）"></a>习题1-6 偶数（odd）</h2><p>题目：输入一个整数，判断它是否为偶数。如果是，则输出”yes”，否则输出”no”。提示：可以用多种方法判断。<br>分析：偶数的判断方法。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-6 偶数（odd）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"yesn"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"non"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-7-打折（discount）"><a href="#习题1-7-打折（discount）" class="headerlink" title="习题1-7 打折（discount）"></a>习题1-7 打折（discount）</h2><p>题目：一件衣服95元，若消费满300元，可打八五折。输入购买衣服件数，输出需要支付的金额（单位：元），保留两位小数。<br>分析：if 的运用，easy。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-7 打折（discount）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, money;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">money = <span class="number">95</span>*n;</span><br><span class="line"><span class="keyword">if</span>(money &gt;= <span class="number">300</span>)</span><br><span class="line">money *= <span class="number">0.85</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-8-绝对值（abs）"><a href="#习题1-8-绝对值（abs）" class="headerlink" title="习题1-8 绝对值（abs）"></a>习题1-8 绝对值（abs）</h2><p>题目：输入一个浮点数，输出它的绝对值，保留两位小数。<br>分析：if 运用，printf 输出格式。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-8 绝对值（abs）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%fn"</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2fn"</span>, -x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-9-三角形（triangle）"><a href="#习题1-9-三角形（triangle）" class="headerlink" title="习题1-9 三角形（triangle）"></a>习题1-9 三角形（triangle）</h2><p>题目：输入三角形三边长度值（均为正整数），判断它是否能为直角三角形的三个边长。如果可以，则输出“yes”，如果不能，则输出“no”。如果根本无法构成三角形，则输出“not a triangle”。<br>分析：if 嵌套使用。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-9 三角形（triangle）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yesn"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"non"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"not a trianglen"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题1-10-年份（year）"><a href="#习题1-10-年份（year）" class="headerlink" title="习题1-10 年份（year）"></a>习题1-10 年份（year）</h2><p>题目：输入年份，判断是否为闰年。如果是，则输出“yes”，否则输出“no”。提示：简单地判断除以4的余数是不够的。<br>分析：if 嵌套使用，闰年的判断方法。  </p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1-10 年份（year）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">100</span> == <span class="number">0</span> &amp;&amp; n%<span class="number">400</span> != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"non"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"yesn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"non"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;习题1-1-平均数（average）&quot;&gt;&lt;a href=&quot;#习题1-1-平均数（average）&quot; class=&quot;headerlink&quot; title=&quot;习题1-1 平均数（average）&quot;&gt;&lt;/a&gt;习题1-1 平均数（average）&lt;/h2&gt;&lt;p&gt;题目：输入3
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
    
      <category term="算法竞赛入门经典" scheme="https://blog.sinalvee.io/tags/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2057 A + B Again</title>
    <link href="https://blog.sinalvee.io/2012/08/06/hdoj-2057/"/>
    <id>https://blog.sinalvee.io/2012/08/06/hdoj-2057/</id>
    <published>2012-08-06T11:44:00.000Z</published>
    <updated>2012-08-06T11:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最大长度为15位，所以用 __int64</p><p>由于是二进制储存，所以当 a+b&lt;0的时候如果直接输出会输出ffff</p><p>所以换一种形式输出负号加a+b的绝对值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2057 A + B Again</span></span><br><span class="line"><span class="comment">// 0MS220K245 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__int64 a, b, c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%I64x%I64x"</span>, &amp;a, &amp;b) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="keyword">if</span>(c &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64Xn"</span>, c);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-%I64Xn"</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>%x 和 %X 输出后的字母大小写不同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最大长度为15位，所以用 __int64&lt;/p&gt;
&lt;p&gt;由于是二进制储存，所以当 a+b&amp;lt;0的时候如果直接输出会输出ffff&lt;/p&gt;
&lt;p&gt;所以换一种形式输出负号加a+b的绝对值&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2054 A == B ?</title>
    <link href="https://blog.sinalvee.io/2012/08/05/hdoj-2054/"/>
    <id>https://blog.sinalvee.io/2012/08/05/hdoj-2054/</id>
    <published>2012-08-05T23:53:00.000Z</published>
    <updated>2012-08-05T23:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始的时候很弱智的用了一个if(a == b)，结果可想而知，错了<br>然后又看似很懂的样子用了一个strcmp(a, b)，结果当然又错了<br>之后百度了一下大牛们的代码，仔细阅读之后总算弄明白了<br>用了指针，先把数字末尾的0都去掉，并换成结束标志<br>然后指针重新指向字符串开头，如果是0的话后移<br>比较两个指针，如果相等，输入YES，反之输出NO</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2054 A == B ?</span></span><br><span class="line"><span class="comment">// 0MS416K676 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[N] = &#123;<span class="number">0</span>&#125;, b[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, &amp;a, &amp;b) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> * p1 = <span class="built_in">strchr</span>(a, <span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">char</span> * p2 = <span class="built_in">strchr</span>(b, <span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">char</span> * pa = a + <span class="built_in">strlen</span>(a) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> * pb = b + <span class="built_in">strlen</span>(b) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pa &gt; p1 &amp;&amp; p1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*pa == <span class="string">'0'</span>)</span><br><span class="line">*pa-- = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pb &gt; p2 &amp;&amp; p2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*pb == <span class="string">'0'</span>)</span><br><span class="line">*pb-- = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*pa == <span class="string">'.'</span>)</span><br><span class="line">*pa = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(*pb == <span class="string">'.'</span>)</span><br><span class="line">*pb = <span class="number">0</span>;</span><br><span class="line">pa = a;</span><br><span class="line">pb = b;</span><br><span class="line"><span class="keyword">while</span>(*pa == <span class="string">'0'</span>)</span><br><span class="line">pa++;</span><br><span class="line"><span class="keyword">while</span>(*pb == <span class="string">'0'</span>)</span><br><span class="line">pb++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(pa, pb) == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始的时候很弱智的用了一个if(a == b)，结果可想而知，错了&lt;br&gt;然后又看似很懂的样子用了一个strcmp(a, b)，结果当然又错了&lt;br&gt;之后百度了一下大牛们的代码，仔细阅读之后总算弄明白了&lt;br&gt;用了指针，先把数字末尾的0都去掉，并换成结束标志&lt;br&gt;然后指针
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2026 首字母变大写</title>
    <link href="https://blog.sinalvee.io/2012/08/04/hdoj-2026/"/>
    <id>https://blog.sinalvee.io/2012/08/04/hdoj-2026/</id>
    <published>2012-08-04T21:31:00.000Z</published>
    <updated>2012-08-04T21:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2026 首字母变大写</span></span><br><span class="line"><span class="comment">// 0MS208K307 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, len;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(gets(a))</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == <span class="string">' '</span> &amp;&amp; a[i] != <span class="string">' '</span>)</span><br><span class="line">a[i] = a[i] - <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] != <span class="string">' '</span>)</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">0</span>] - <span class="number">32</span>;</span><br><span class="line">        <span class="built_in">puts</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2042 不容易系列之二</title>
    <link href="https://blog.sinalvee.io/2012/08/04/hdoj-2042/"/>
    <id>https://blog.sinalvee.io/2012/08/04/hdoj-2042/</id>
    <published>2012-08-04T20:53:00.000Z</published>
    <updated>2012-08-04T20:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2042 不容易系列之二</span></span><br><span class="line"><span class="comment">// 0MS220K200 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a, x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">while</span>(a--)</span><br><span class="line">&#123;</span><br><span class="line">x = (x<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1005 Number Sequence</title>
    <link href="https://blog.sinalvee.io/2012/08/03/hdoj-1005/"/>
    <id>https://blog.sinalvee.io/2012/08/03/hdoj-1005/</id>
    <published>2012-08-03T16:01:00.000Z</published>
    <updated>2012-08-03T16:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1005 Number Sequence</span></span><br><span class="line"><span class="comment">// 31MS220K370 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, __int64 n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">__int64 n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%I64d"</span>, &amp;a, &amp;b, &amp;n) &amp;&amp; a != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span> &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, fun(a, b, n%<span class="number">49</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, __int64 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> (a*fun(a, b, n<span class="number">-1</span>) + b*fun(a, b, n<span class="number">-2</span>)) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2039 三角形</title>
    <link href="https://blog.sinalvee.io/2012/08/03/hdoj-2039/"/>
    <id>https://blog.sinalvee.io/2012/08/03/hdoj-2039/</id>
    <published>2012-08-03T15:14:00.000Z</published>
    <updated>2012-08-03T15:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2039 三角形</span></span><br><span class="line"><span class="comment">// 0MS224K224 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">float</span> a, b, c;   <span class="comment">//注意审题，题目要求是三个正数，而非整数</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f%f%f"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YESn"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NOn"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2032 杨辉三角</title>
    <link href="https://blog.sinalvee.io/2012/08/03/hdoj-2032/"/>
    <id>https://blog.sinalvee.io/2012/08/03/hdoj-2032/</id>
    <published>2012-08-03T11:58:00.000Z</published>
    <updated>2012-08-03T11:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2032 杨辉三角</span></span><br><span class="line"><span class="comment">//0MS236K507 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">31</span>][<span class="number">31</span>] = &#123;<span class="number">0</span>&#125;, i, j, n;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">a[i][j] = a[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j ++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(j != i)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i][j]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2018 母牛的故事</title>
    <link href="https://blog.sinalvee.io/2012/08/03/hdoj-2018/"/>
    <id>https://blog.sinalvee.io/2012/08/03/hdoj-2018/</id>
    <published>2012-08-03T11:24:00.000Z</published>
    <updated>2012-08-03T11:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2018 母牛的故事</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0MS228K237 BGCC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, a[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">4</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, a[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是用递归的方法写的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//0MS228K237 BGCC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, fun(n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">0</span> &amp;&amp; n&lt;<span class="number">5</span>)</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> fun(n<span class="number">-1</span>) + fun(n<span class="number">-3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从第五年开始，这一年的母牛总数 = 上一年的母牛数 + 能生育的母牛数（即3年前的母牛数）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2031 进制转换</title>
    <link href="https://blog.sinalvee.io/2012/08/03/hdoj-2031/"/>
    <id>https://blog.sinalvee.io/2012/08/03/hdoj-2031/</id>
    <published>2012-08-03T11:20:00.000Z</published>
    <updated>2012-08-03T11:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2031 进制转换</span></span><br><span class="line"><span class="comment">// 0MS232K407 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, p, q, a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line">q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = <span class="number">-1</span>*m;</span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a[q++] = m%n;</span><br><span class="line">m = m/n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m);</span><br><span class="line"><span class="keyword">if</span>(p == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[q] &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="string">'A'</span>+a[q]<span class="number">-10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a[q]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>__int64 类型（VC中）与long long 型（gcc中，C99标准）</title>
    <link href="https://blog.sinalvee.io/2012/08/02/int64-and-long-long/"/>
    <id>https://blog.sinalvee.io/2012/08/02/int64-and-long-long/</id>
    <published>2012-08-02T17:40:00.000Z</published>
    <updated>2012-08-02T17:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="http://blog.csdn.net/luxuejuncarl/article/details/1568457" target="_blank" rel="noopener">http://blog.csdn.net/luxuejuncarl/article/details/1568457</a></p><p>int64 是有符号 64 位整数数据类型，也就是 C# 中的 long 和 SQL Server 中的 bigint，范围为 -2^63 (-9,223,372,036,854,775,808) 到 2^63-1 (9,223,372,036,854,775,807)，存储空间占 8 字节。用于整数值可能超过 int 数据类型支持范围的情况。</p><p>c#中:</p><p>Int64 值类型表示值介于 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 之间的整数。</p><p>Int64 为比较此类型的实例、将实例的值转换为它的字符串表示形式以及将数字的字符串表示形式转换为此类型的实例提供了相应的方法。</p><p>警告 在 32 位 Intel 计算机上分配 64 位值不是原子操作；即该操作不是线程安全的。这意味着，如果两个人同时将一个值分配给一个静态 Int64 字段，则该字段的最终值是无法预测的。</p><p>有关格式规范代码如何控制值类型的字符串表示形式的信息，请参见格式化化概述。此类型实现接口 IComparable、IFormattable 和 IConvertible。使用 Convert 类进行转换，而不是使用此类型的 IConvertible 显式接口成员实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C语言INT64  （VC中）</span><br><span class="line">__int64 是一个关键字，用_int64 来可以指定一个64位的整型变量</span><br><span class="line">__int8 nSmall;      &#x2F;&#x2F; 声明 8位 整数</span><br><span class="line">__int16 nMedium;    &#x2F;&#x2F; 声明 16位 整数</span><br><span class="line">__int32 nLarge;     &#x2F;&#x2F; 声明 32位 整数</span><br><span class="line">__int64 nHuge;      &#x2F;&#x2F; 声明 64位 整数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">long   long是C99标准的C语言内置类型。需要符合C99的编译器</span><br><span class="line">g++ &#x2F;gcc中</span><br><span class="line"></span><br><span class="line">long long a;</span><br><span class="line">printf(&quot;%lld&quot;,a);  </span><br><span class="line"></span><br><span class="line">mingw32 中</span><br><span class="line"></span><br><span class="line">__int64 a;</span><br><span class="line">printf(&quot;%I64d&quot;,a);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;http://blog.csdn.net/luxuejuncarl/article/details/1568457&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/luxuejuncarl
      
    
    </summary>
    
    
      <category term="Notes" scheme="https://blog.sinalvee.io/categories/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>hdoj-2028 Lowest Common Multiple Plus</title>
    <link href="https://blog.sinalvee.io/2012/08/02/hdoj-2028/"/>
    <id>https://blog.sinalvee.io/2012/08/02/hdoj-2028/</id>
    <published>2012-08-02T17:07:00.000Z</published>
    <updated>2012-08-02T17:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2028 Lowest Common Multiple Plus</span></span><br><span class="line"><span class="comment">// 0MS  228K  341 B  GCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    __int64 x, y, a, b, temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;x);</span><br><span class="line">        a = x;</span><br><span class="line">        <span class="keyword">while</span>(--n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;y);</span><br><span class="line">            b = y;</span><br><span class="line">            <span class="keyword">while</span>(y)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = x%y;</span><br><span class="line">                x = y;</span><br><span class="line">                y = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            x = a*b/x;</span><br><span class="line">            a = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64dn"</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">32位数……</span></span><br><span class="line"><span class="comment">int; long int; long long 都不行（理论上 __int64 和long long 是相同的，但由于用的是windows下的MingW，所以long long 不可以，__int64可以）</span></span><br><span class="line"><span class="comment">__int64可以</span></span><br><span class="line"><span class="comment">注意输入和输出的时候要用%I64d</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>相关资料：<br><a href="http://blog.csdn.net/litiouslove/article/details/7824028" target="_blank" rel="noopener">__int64 类型（VC中）与long long 型（gcc中，C99标准）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1061 Rightmost Digit 右值</title>
    <link href="https://blog.sinalvee.io/2012/08/02/hdoj-1061/"/>
    <id>https://blog.sinalvee.io/2012/08/02/hdoj-1061/</id>
    <published>2012-08-02T16:12:00.000Z</published>
    <updated>2012-08-02T16:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1061 Rightmost Digit 右值</span></span><br><span class="line"><span class="comment">// 0MS228K253 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(vodi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, ncase, m, n, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ncase);</span><br><span class="line"><span class="keyword">while</span>(ncase--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;n);</span><br><span class="line">t = n % <span class="number">10</span>;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= (n<span class="number">-1</span>)%<span class="number">4</span>; i ++) <span class="comment">//此处可换为 i &lt; n%4 + 4;可解决n%4 ==0的情况</span></span><br><span class="line">&#123;</span><br><span class="line">m *= t;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, m%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">末位数      相乘后的末位数</span><br><span class="line">1           1</span><br><span class="line">2           4   8   6   2</span><br><span class="line">3           9   7   1   3</span><br><span class="line">4           6   4</span><br><span class="line">5           5</span><br><span class="line">6           6</span><br><span class="line">7           9   3   1   7</span><br><span class="line">8           4   2   6   8</span><br><span class="line">9           1   9（由于x9是奇数，所以1不会出现）</span><br><span class="line">0           0</span><br><span class="line"></span><br><span class="line">由上面的分析可见，每个数相乘后最多有四个结果</span><br><span class="line">所以对一个数n，只需做其对4取余后余数次相乘即可</span><br><span class="line">但是会出现 n%4 &#x3D;&#x3D; 0 的情况</span><br><span class="line">由于x5^x5的末位数是5，x9^x9的末位数是9</span><br><span class="line">所以将n%4转换为(n-1)%4</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1060 Leftmost Digit 左值</title>
    <link href="https://blog.sinalvee.io/2012/08/01/hdoj-1060/"/>
    <id>https://blog.sinalvee.io/2012/08/01/hdoj-1060/</id>
    <published>2012-08-01T15:24:00.000Z</published>
    <updated>2012-08-01T15:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h2><p>1.第一行输入一个整数T代表接下来有T组测试数据。<br>2.接下来的T行，每行输入一个整数（1&lt;=N&lt;=1,000,000,000）。<br>3.输出结果为N^N（N的N次方）最左边的那一位数（即最高位）。<br>4.注意：每行输出一个结果。</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>1.令M = N^N<br>2.两边取对数，log10M = N<em>log10N，得到M = 10^(N</em>log10N)<br>3.令N^(N*log10N) = a（整数部分） + b（小数部分），所以M = 10^（a+b） = 10^a *10^b，由于10的整数次幂的最高位必定是1，所以M的最高位只需考虑10^b<br>4.最后对10^b取整，输出取整的这个数就行了。（因为0&lt;=b&lt;1,所以1&lt;=10^b&lt;=10对其取整，那么的到的就是一个个位，也就是所求的数）。</p><h2 id="需要注意的地方："><a href="#需要注意的地方：" class="headerlink" title="需要注意的地方："></a>需要注意的地方：</h2><p>关于取整：可以用强制类型转换（int）10^b，也可以用floor函数floor（10^b），但要注意的问题是floor函数是double型的，若用floor函数，则在输出时要用”%.0lfn”,(有关floor函数和ceil函数，详见<a href="http://baike.baidu.com/view/2873705.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/2873705.htm</a>)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1060 Leftmost Digit</span></span><br><span class="line"><span class="comment">// 0MS236K345 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, ncase;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ncase);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ncase; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">double</span> m = n * <span class="built_in">log10</span>((<span class="keyword">double</span>)n);</span><br><span class="line">        <span class="keyword">double</span> g = m - (<span class="keyword">long</span> <span class="keyword">long</span>)m;</span><br><span class="line">        g = <span class="built_in">pow</span>(<span class="number">10.0</span>, g);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%dn"</span>, (<span class="keyword">int</span>)g);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>开始写了一个程序提交了几次Time Limit Exceeded<br>数太大了，求n^n花费时间太长……<br>看了别人的代码之后才明白<br>求log10之后计算会更简单<br>这个题目有点思想，不算水题，只能说找到方法后就很简单。  </p><p>log10N^N = N*log10N = M = a.b(a是整数部分，0.b是小数部分)<br>所以10^M = 10^a.b = N^N(即N^N为a位数)<br>10^b向下取整即为首位数<br>举个例子：3^3=27, 3log3 = 1.431364, 10^0.431364 = 2.70000……<br>此题还是要学会观察，并熟悉对数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;1.第一行输入一个整数T代表接下来有T组测试数据。&lt;br&gt;2.接下来的T行，每行输入一个整数（1&amp;lt;=N&amp;lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2003 求绝对值</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-2003/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-2003/</id>
    <published>2012-07-31T18:17:00.000Z</published>
    <updated>2012-07-31T18:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2003 求绝对值</span></span><br><span class="line"><span class="comment">// 0MS244K181 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lfn"</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lfn"</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2002 计算球体积</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-2002/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-2002/</id>
    <published>2012-07-31T18:08:00.000Z</published>
    <updated>2012-07-31T18:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2002 计算球体积</span></span><br><span class="line"><span class="comment">// 15MS244K188 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415927</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> r, s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;r) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="number">4.0</span>/<span class="number">3.0</span> * PI * r * r * r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lfn"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2001 计算两点间的距离</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-2001/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-2001/</id>
    <published>2012-07-31T18:01:00.000Z</published>
    <updated>2012-07-31T18:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2001 计算两点间的距离</span></span><br><span class="line"><span class="comment">//0MS244K245 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x1, x2, y1, y2, s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="built_in">sqrt</span>((x2-x1) * (x2-x1) + (y2-y1) * (y2-y1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lfn"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始没注意四个数是[实数]……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-2000 ASCII码排序</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-2000/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-2000/</id>
    <published>2012-07-31T17:48:00.000Z</published>
    <updated>2012-07-31T17:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_2000 ASCII码排序</span></span><br><span class="line"><span class="comment">// 0MS228K434 BGCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">3</span>], temp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c%c%c"</span>, &amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>]) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &gt; a[<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[<span class="number">0</span>];</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">1</span>];</span><br><span class="line">a[<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &gt; a[<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[<span class="number">0</span>];</span><br><span class="line">a[<span class="number">0</span>] = a[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">2</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>] &gt; a[<span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[<span class="number">1</span>];</span><br><span class="line">a[<span class="number">1</span>] = a[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">2</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c %cn"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line">getchar(); <span class="comment">// 接收回车……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有getchar()会出错……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1021 Fibonacci Again</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1021/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1021/</id>
    <published>2012-07-31T16:41:00.000Z</published>
    <updated>2012-07-31T16:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1021 Fibonacci Again</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//通过找规律，发现</span></span><br><span class="line"><span class="comment">n           0   1   2   3   4   5   6   7   8   9   10</span></span><br><span class="line"><span class="comment">f(n)        7   11  18  29  47  76  123 199 322 521 843</span></span><br><span class="line"><span class="comment">余数        1   2   0   2   2   1   0   1   1   2   0</span></span><br><span class="line"><span class="comment">每8个数是一个循环，%8 == 2 和 &amp;8 == 6的时候f(n)%3 == 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">8</span> == <span class="number">2</span> || n % <span class="number">8</span> == <span class="number">6</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yesn"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"non"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面这种做法是不对的，出现STACK_OVERFLOW (堆栈溢出) 栈溢出（又称缓冲区溢出）</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">int fun(int n);</span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int i, n;</span></span><br><span class="line"><span class="comment">    while(scanf("%d", &amp;n) &amp;&amp; n &lt; 1000000)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(fun(n) % 3 == 0)</span></span><br><span class="line"><span class="comment">            printf("yesn");</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment">            printf("non");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int fun(int n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(n == 0)</span></span><br><span class="line"><span class="comment">return 7;</span></span><br><span class="line"><span class="comment">else if(n == 1)</span></span><br><span class="line"><span class="comment">return 11;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return fun(n-1) + fun(n-2);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1020 Encoding</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1020/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1020/</id>
    <published>2012-07-31T15:50:00.000Z</published>
    <updated>2012-07-31T15:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1020 Encoding</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, n, len, c[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10000</span>], b[<span class="number">26</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();        <span class="comment">//接收上面的回车，以免被后面gets()接收</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++)</span><br><span class="line">      c[j] = <span class="number">0</span>;</span><br><span class="line">gets(a);</span><br><span class="line">len = <span class="built_in">strlen</span>(a);</span><br><span class="line">b[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>, k = <span class="number">0</span>; j &lt; len; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k] == a[j])</span><br><span class="line">&#123;</span><br><span class="line">c[k]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[k+<span class="number">1</span>] = a[j];</span><br><span class="line">k++;</span><br><span class="line">c[k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= k; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[j] != <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%c"</span>, c[j], b[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, b[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1008 Elevator</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1008/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1008/</id>
    <published>2012-07-31T14:43:00.000Z</published>
    <updated>2012-07-31T14:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1008 Elevator 电梯</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, time, a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">if</span>((a[i] - a[i<span class="number">-1</span>]) &gt; <span class="number">0</span>)</span><br><span class="line">time = time + (a[i] - a[i<span class="number">-1</span>]) * <span class="number">6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">time = time + (a[i<span class="number">-1</span>] - a[i]) * <span class="number">4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>曾经做过的一道题竟然还想了半天……</p><p>这是一道数学题……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1001 Sum Problem</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1001/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1001/</id>
    <published>2012-07-31T13:44:00.000Z</published>
    <updated>2012-07-31T13:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1001 Sum Problem</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, sum;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">sum = sum + i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dnn"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1096 A+B for Input-Output Practice (VIII)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1096/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1096/</id>
    <published>2012-07-31T01:42:00.000Z</published>
    <updated>2012-07-31T01:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1096 A+B for Input-Output Practice (VIII)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, a, sum, i, j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">            sum = sum + a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%dn"</span>, sum);</span><br><span class="line">        <span class="keyword">if</span>(i != n - <span class="number">1</span>) <span class="comment">// 这里是这道题的重点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"n"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每两个输出之间有空行而最后一个输出之后没有空行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1095 A+B for Input-Output Practice (VII)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1095/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1095/</id>
    <published>2012-07-31T01:33:00.000Z</published>
    <updated>2012-07-31T01:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1095 A+B for Input-Output Practice (VII)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%dnn"</span>, a + b);</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题很水……</p><p>开始while没有条件，超时</p><p>第二次 i &lt; 10，WA</p><p>改成 i &lt; 5， AC….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1094 A+B for Input-Output Practice (VI)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1094/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1094/</id>
    <published>2012-07-31T01:20:00.000Z</published>
    <updated>2012-07-31T01:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1094 A+B for Input-Output Practice (VI)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a, sum, i;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">sum = sum + a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1093 A+B for Input-Output Practice (V)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1093/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1093/</id>
    <published>2012-07-31T01:14:00.000Z</published>
    <updated>2012-07-31T01:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1093 A+B for Input-Output Practice (V)</span></span><br><span class="line"><span class="comment">// 0MS 228K 296 B GCC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, sum, i, j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">                sum = sum + a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%dn"</span>, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1092 A+B for Input-Output Practice (IV)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1092/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1092/</id>
    <published>2012-07-31T01:06:00.000Z</published>
    <updated>2012-07-31T01:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1092 A+B for Input-Output Practice (IV)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, n, i, sum;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>) <span class="comment">// while(scanf("%d", &amp;n) != 0)是错误的用法</span></span><br><span class="line">&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">sum = sum + a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line"><span class="comment">// while(scanf("%d", &amp;n) != 0)是错误的用法</span></span><br><span class="line"><span class="comment">// 如此一来判断的是scanf()的返回值而不是n的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1091 A+B for Input-Output Practice (III)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1091/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1091/</id>
    <published>2012-07-31T00:48:00.000Z</published>
    <updated>2012-07-31T00:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然是水题但是依然有需要注意的地方。<br><code>||</code>与<code>&amp;&amp;</code>要弄清楚区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1091 A+B for Input-Output Practice (III)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">while</span>(a != <span class="number">0</span> || b != <span class="number">0</span>) <span class="comment">//这里注意 || 与 &amp;&amp; 的区别</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, a + b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b) &amp;&amp; (a != <span class="number">0</span> || b != <span class="number">0</span>)) <span class="comment">//这里注意 || 与 &amp;&amp; 的区别</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%dn"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然是水题但是依然有需要注意的地方。&lt;br&gt;&lt;code&gt;||&lt;/code&gt;与&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;要弄清楚区别&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1090 A+B for Input-Output Practice (II)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1090/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1090/</id>
    <published>2012-07-31T00:28:00.000Z</published>
    <updated>2012-07-31T00:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1090 A+B for Input-Output Practice (II)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n-- &amp;&amp; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%dn"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的水题……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
  <entry>
    <title>hdoj-1089 A+B for Input-Output Practice (I)</title>
    <link href="https://blog.sinalvee.io/2012/07/31/hdoj-1089/"/>
    <id>https://blog.sinalvee.io/2012/07/31/hdoj-1089/</id>
    <published>2012-07-31T00:18:00.000Z</published>
    <updated>2012-07-31T00:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hdoj_1089 A+B for Input-Output Practice (I)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%dn"</span>, a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>水题，不解释……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.sinalvee.io/categories/Algorithm/"/>
    
      <category term="ACM" scheme="https://blog.sinalvee.io/categories/Algorithm/ACM/"/>
    
    
      <category term="hdoj" scheme="https://blog.sinalvee.io/tags/hdoj/"/>
    
  </entry>
  
</feed>
